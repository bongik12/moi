{"version":3,"file":"tf-converter.fesm.min.js","sources":["../src/data/compiled_api.ts","../src/operations/custom_op/register.ts","../src/operations/executors/utils.ts","../src/operations/op_list/arithmetic.ts","../src/operations/op_list/basic_math.ts","../src/operations/op_list/control.ts","../src/operations/op_list/convolution.ts","../src/operations/op_list/creation.ts","../src/operations/op_list/dynamic.ts","../src/operations/op_list/evaluation.ts","../src/operations/op_list/graph.ts","../src/operations/op_list/hash_table.ts","../src/operations/op_list/image.ts","../src/operations/op_list/logical.ts","../src/operations/op_list/matrices.ts","../src/operations/op_list/normalization.ts","../src/operations/op_list/reduction.ts","../src/operations/op_list/slice_join.ts","../src/operations/op_list/spectral.ts","../src/operations/op_list/transformation.ts","../src/operations/operation_mapper.ts","../src/operations/custom_op/node_value_impl.ts","../src/executor/tensor_utils.ts","../src/executor/tensor_array.ts","../src/executor/tensor_list.ts","../src/operations/executors/control_executor.ts","../src/operations/executors/convolution_executor.ts","../src/operations/executors/dynamic_executor.ts","../src/executor/hash_table.ts","../src/operations/operation_executor.ts","../src/operations/executors/arithmetic_executor.ts","../src/operations/executors/basic_math_executor.ts","../src/operations/executors/creation_executor.ts","../src/operations/executors/evaluation_executor.ts","../src/operations/executors/image_executor.ts","../src/operations/executors/graph_executor.ts","../src/operations/executors/logical_executor.ts","../src/operations/executors/matrices_executor.ts","../src/operations/executors/normalization_executor.ts","../src/operations/executors/reduction_executor.ts","../src/operations/executors/slice_join_executor.ts","../src/operations/executors/spectral_executor.ts","../src/operations/executors/transformation_executor.ts","../src/operations/executors/hash_table_executor.ts","../src/executor/execution_context.ts","../src/executor/model_analysis.ts","../src/executor/graph_executor.ts","../src/executor/resource_manager.ts","../src/executor/graph_model.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/* tslint:disable */\n\n/** Properties of an Any. */\nexport declare interface IAny {\n  /** Any typeUrl */\n  typeUrl?: (string|null);\n\n  /** Any value */\n  value?: (Uint8Array|null);\n}\n\n/** DataType enum. */\nexport enum DataType {\n  'DT_INVALID' = 0,\n  'DT_FLOAT' = 1,\n  'DT_DOUBLE' = 2,\n  'DT_INT32' = 3,\n  'DT_UINT8' = 4,\n  'DT_INT16' = 5,\n  'DT_INT8' = 6,\n  'DT_STRING' = 7,\n  'DT_COMPLEX64' = 8,\n  'DT_INT64' = 9,\n  'DT_BOOL' = 10,\n  'DT_QINT8' = 11,\n  'DT_QUINT8' = 12,\n  'DT_QINT32' = 13,\n  'DT_BFLOAT16' = 14,\n  'DT_FLOAT_REF' = 101,\n  'DT_DOUBLE_REF' = 102,\n  'DT_INT32_REF' = 103,\n  'DT_UINT8_REF' = 104,\n  'DT_INT16_REF' = 105,\n  'DT_INT8_REF' = 106,\n  'DT_STRING_REF' = 107,\n  'DT_COMPLEX64_REF' = 108,\n  'DT_INT64_REF' = 109,\n  'DT_BOOL_REF' = 110,\n  'DT_QINT8_REF' = 111,\n  'DT_QUINT8_REF' = 112,\n  'DT_QINT32_REF' = 113,\n  'DT_BFLOAT16_REF' = 114\n}\n\n/** Properties of a TensorShape. */\nexport declare interface ITensorShape {\n  /** TensorShape dim */\n  dim?: (TensorShape.IDim[]|null);\n\n  /** TensorShape unknownRank */\n  unknownRank?: (boolean|null);\n}\n\nexport namespace TensorShape {\n  /** Properties of a Dim. */\n  export declare interface IDim {\n    /** Dim size */\n    size?: (number|string|null);\n\n    /** Dim name */\n    name?: (string|null);\n  }\n}\n\n/** Properties of a Tensor. */\nexport declare interface ITensor {\n  /** Tensor dtype */\n  dtype?: (DataType|null);\n\n  /** Tensor tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Tensor versionNumber */\n  versionNumber?: (number|null);\n\n  /** Tensor tensorContent */\n  tensorContent?: (Uint8Array|null);\n\n  /** Tensor floatVal */\n  floatVal?: (number[]|null);\n\n  /** Tensor doubleVal */\n  doubleVal?: (number[]|null);\n\n  /** Tensor intVal */\n  intVal?: (number[]|null);\n\n  /** Tensor stringVal */\n  stringVal?: (Uint8Array[]|null);\n\n  /** Tensor scomplexVal */\n  scomplexVal?: (number[]|null);\n\n  /** Tensor int64Val */\n  int64Val?: ((number | string)[]|null);\n\n  /** Tensor boolVal */\n  boolVal?: (boolean[]|null);\n\n  /** Tensor uint32Val */\n  uint32Val?: (number[]|null);\n\n  /** Tensor uint64Val */\n  uint64Val?: ((number | string)[]|null);\n}\n\n/** Properties of an AttrValue. */\nexport declare interface IAttrValue {\n  /** AttrValue list */\n  list?: (AttrValue.IListValue|null);\n\n  /** AttrValue s */\n  s?: (string|null);\n\n  /** AttrValue i */\n  i?: (number|string|null);\n\n  /** AttrValue f */\n  f?: (number|null);\n\n  /** AttrValue b */\n  b?: (boolean|null);\n\n  /** AttrValue type */\n  type?: (DataType|null);\n\n  /** AttrValue shape */\n  shape?: (ITensorShape|null);\n\n  /** AttrValue tensor */\n  tensor?: (ITensor|null);\n\n  /** AttrValue placeholder */\n  placeholder?: (string|null);\n\n  /** AttrValue func */\n  func?: (INameAttrList|null);\n}\n\nexport namespace AttrValue {\n  /** Properties of a ListValue. */\n  export declare interface IListValue {\n    /** ListValue s */\n    s?: (string[]|null);\n\n    /** ListValue i */\n    i?: ((number | string)[]|null);\n\n    /** ListValue f */\n    f?: (number[]|null);\n\n    /** ListValue b */\n    b?: (boolean[]|null);\n\n    /** ListValue type */\n    type?: (DataType[]|null);\n\n    /** ListValue shape */\n    shape?: (ITensorShape[]|null);\n\n    /** ListValue tensor */\n    tensor?: (ITensor[]|null);\n\n    /** ListValue func */\n    func?: (INameAttrList[]|null);\n  }\n}\n\n/** Properties of a NameAttrList. */\nexport declare interface INameAttrList {\n  /** NameAttrList name */\n  name?: (string|null);\n\n  /** NameAttrList attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a NodeDef. */\nexport declare interface INodeDef {\n  /** NodeDef name */\n  name?: (string|null);\n\n  /** NodeDef op */\n  op?: (string|null);\n\n  /** NodeDef input */\n  input?: (string[]|null);\n\n  /** NodeDef device */\n  device?: (string|null);\n\n  /** NodeDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a VersionDef. */\nexport declare interface IVersionDef {\n  /** VersionDef producer */\n  producer?: (number|null);\n\n  /** VersionDef minConsumer */\n  minConsumer?: (number|null);\n\n  /** VersionDef badConsumers */\n  badConsumers?: (number[]|null);\n}\n\n/** Properties of a GraphDef. */\nexport declare interface IGraphDef {\n  /** GraphDef node */\n  node?: (INodeDef[]|null);\n\n  /** GraphDef versions */\n  versions?: (IVersionDef|null);\n\n  /** GraphDef library */\n  library?: (IFunctionDefLibrary|null);\n}\n\n/** Properties of a CollectionDef. */\nexport declare interface ICollectionDef {\n  /** CollectionDef nodeList */\n  nodeList?: (CollectionDef.INodeList|null);\n\n  /** CollectionDef bytesList */\n  bytesList?: (CollectionDef.IBytesList|null);\n\n  /** CollectionDef int64List */\n  int64List?: (CollectionDef.IInt64List|null);\n\n  /** CollectionDef floatList */\n  floatList?: (CollectionDef.IFloatList|null);\n\n  /** CollectionDef anyList */\n  anyList?: (CollectionDef.IAnyList|null);\n}\n\nexport namespace CollectionDef {\n  /** Properties of a NodeList. */\n  export declare interface INodeList {\n    /** NodeList value */\n    value?: (string[]|null);\n  }\n\n  /** Properties of a BytesList. */\n  export declare interface IBytesList {\n    /** BytesList value */\n    value?: (Uint8Array[]|null);\n  }\n\n  /** Properties of an Int64List. */\n  export declare interface IInt64List {\n    /** Int64List value */\n    value?: ((number | string)[]|null);\n  }\n\n  /** Properties of a FloatList. */\n  export declare interface IFloatList {\n    /** FloatList value */\n    value?: (number[]|null);\n  }\n\n  /** Properties of an AnyList. */\n  export declare interface IAnyList {\n    /** AnyList value */\n    value?: (IAny[]|null);\n  }\n}\n\n/** Properties of a SaverDef. */\nexport declare interface ISaverDef {\n  /** SaverDef filenameTensorName */\n  filenameTensorName?: (string|null);\n\n  /** SaverDef saveTensorName */\n  saveTensorName?: (string|null);\n\n  /** SaverDef restoreOpName */\n  restoreOpName?: (string|null);\n\n  /** SaverDef maxToKeep */\n  maxToKeep?: (number|null);\n\n  /** SaverDef sharded */\n  sharded?: (boolean|null);\n\n  /** SaverDef keepCheckpointEveryNHours */\n  keepCheckpointEveryNHours?: (number|null);\n\n  /** SaverDef version */\n  version?: (SaverDef.CheckpointFormatVersion|null);\n}\n\nexport namespace SaverDef {\n  /** CheckpointFormatVersion enum. */\n  export enum CheckpointFormatVersion {'LEGACY' = 0, 'V1' = 1, 'V2' = 2}\n}\n\n/** Properties of a TensorInfo. */\nexport declare interface ITensorInfo {\n  /** TensorInfo name */\n  name?: (string|null);\n\n  /** TensorInfo cooSparse */\n  cooSparse?: (TensorInfo.ICooSparse|null);\n\n  /** TensorInfo dtype */\n  dtype?: (DataType|null);\n\n  /** TensorInfo tensorShape */\n  tensorShape?: (ITensorShape|null);\n}\n\nexport namespace TensorInfo {\n  /** Properties of a CooSparse. */\n  export declare interface ICooSparse {\n    /** CooSparse valuesTensorName */\n    valuesTensorName?: (string|null);\n\n    /** CooSparse indicesTensorName */\n    indicesTensorName?: (string|null);\n\n    /** CooSparse denseShapeTensorName */\n    denseShapeTensorName?: (string|null);\n  }\n}\n\n/** Properties of a SignatureDef. */\nexport declare interface ISignatureDef {\n  /** SignatureDef inputs */\n  inputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef outputs */\n  outputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef methodName */\n  methodName?: (string|null);\n}\n\n/** Properties of an AssetFileDef. */\nexport declare interface IAssetFileDef {\n  /** AssetFileDef tensorInfo */\n  tensorInfo?: (ITensorInfo|null);\n\n  /** AssetFileDef filename */\n  filename?: (string|null);\n}\n\n/** Properties of an OpDef. */\nexport declare interface IOpDef {\n  /** OpDef name */\n  name?: (string|null);\n\n  /** OpDef inputArg */\n  inputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef outputArg */\n  outputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef attr */\n  attr?: (OpDef.IAttrDef[]|null);\n\n  /** OpDef deprecation */\n  deprecation?: (OpDef.IOpDeprecation|null);\n\n  /** OpDef summary */\n  summary?: (string|null);\n\n  /** OpDef description */\n  description?: (string|null);\n\n  /** OpDef isCommutative */\n  isCommutative?: (boolean|null);\n\n  /** OpDef isAggregate */\n  isAggregate?: (boolean|null);\n\n  /** OpDef isStateful */\n  isStateful?: (boolean|null);\n\n  /** OpDef allowsUninitializedInput */\n  allowsUninitializedInput?: (boolean|null);\n}\n\nexport namespace OpDef {\n  /** Properties of an ArgDef. */\n  export declare interface IArgDef {\n    /** ArgDef name */\n    name?: (string|null);\n\n    /** ArgDef description */\n    description?: (string|null);\n\n    /** ArgDef type */\n    type?: (DataType|null);\n\n    /** ArgDef typeAttr */\n    typeAttr?: (string|null);\n\n    /** ArgDef numberAttr */\n    numberAttr?: (string|null);\n\n    /** ArgDef typeListAttr */\n    typeListAttr?: (string|null);\n\n    /** ArgDef isRef */\n    isRef?: (boolean|null);\n  }\n\n  /** Properties of an AttrDef. */\n  export declare interface IAttrDef {\n    /** AttrDef name */\n    name?: (string|null);\n\n    /** AttrDef type */\n    type?: (string|null);\n\n    /** AttrDef defaultValue */\n    defaultValue?: (IAttrValue|null);\n\n    /** AttrDef description */\n    description?: (string|null);\n\n    /** AttrDef hasMinimum */\n    hasMinimum?: (boolean|null);\n\n    /** AttrDef minimum */\n    minimum?: (number|string|null);\n\n    /** AttrDef allowedValues */\n    allowedValues?: (IAttrValue|null);\n  }\n\n  /** Properties of an OpDeprecation. */\n  export declare interface IOpDeprecation {\n    /** OpDeprecation version */\n    version?: (number|null);\n\n    /** OpDeprecation explanation */\n    explanation?: (string|null);\n  }\n}\n\n/** Properties of an OpList. */\nexport declare interface IOpList {\n  /** OpList op */\n  op?: (IOpDef[]|null);\n}\n\n/** Properties of a MetaGraphDef. */\nexport declare interface IMetaGraphDef {\n  /** MetaGraphDef metaInfoDef */\n  metaInfoDef?: (MetaGraphDef.IMetaInfoDef|null);\n\n  /** MetaGraphDef graphDef */\n  graphDef?: (IGraphDef|null);\n\n  /** MetaGraphDef saverDef */\n  saverDef?: (ISaverDef|null);\n\n  /** MetaGraphDef collectionDef */\n  collectionDef?: ({[k: string]: ICollectionDef}|null);\n\n  /** MetaGraphDef signatureDef */\n  signatureDef?: ({[k: string]: ISignatureDef}|null);\n\n  /** MetaGraphDef assetFileDef */\n  assetFileDef?: (IAssetFileDef[]|null);\n}\n\nexport namespace MetaGraphDef {\n  /** Properties of a MetaInfoDef. */\n  export declare interface IMetaInfoDef {\n    /** MetaInfoDef metaGraphVersion */\n    metaGraphVersion?: (string|null);\n\n    /** MetaInfoDef strippedOpList */\n    strippedOpList?: (IOpList|null);\n\n    /** MetaInfoDef anyInfo */\n    anyInfo?: (IAny|null);\n\n    /** MetaInfoDef tags */\n    tags?: (string[]|null);\n\n    /** MetaInfoDef tensorflowVersion */\n    tensorflowVersion?: (string|null);\n\n    /** MetaInfoDef tensorflowGitVersion */\n    tensorflowGitVersion?: (string|null);\n  }\n}\n\n/** Properties of a SavedModel. */\nexport declare interface ISavedModel {\n  /** SavedModel savedModelSchemaVersion */\n  savedModelSchemaVersion?: (number|string|null);\n\n  /** SavedModel metaGraphs */\n  metaGraphs?: (IMetaGraphDef[]|null);\n}\n\n/** Properties of a FunctionDefLibrary. */\nexport declare interface IFunctionDefLibrary {\n  /** FunctionDefLibrary function */\n  'function'?: (IFunctionDef[]|null);\n\n  /** FunctionDefLibrary gradient */\n  gradient?: (IGradientDef[]|null);\n}\n\n/** Properties of a FunctionDef. */\nexport declare interface IFunctionDef {\n  /** FunctionDef signature */\n  signature?: (IOpDef|null);\n\n  /** FunctionDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n\n  /** FunctionDef nodeDef */\n  nodeDef?: (INodeDef[]|null);\n\n  /** FunctionDef ret */\n  ret?: ({[k: string]: string}|null);\n}\n\n/** Properties of a GradientDef. */\nexport declare interface IGradientDef {\n  /** GradientDef functionName */\n  functionName?: (string|null);\n\n  /** GradientDef gradientFunc */\n  gradientFunc?: (string|null);\n}\n","\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpExecutor, OpMapper} from '../types';\n\nconst CUSTOM_OPS: {[key: string]: OpMapper} = {};\n\n/**\n * Register an Op for graph model executor. This allow you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object is based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function registerOp(name: string, opFunc: OpExecutor) {\n  const opMapper: OpMapper = {\n    tfOpName: name,\n    category: 'custom',\n    inputs: [],\n    attrs: [],\n    customExecutor: opFunc\n  };\n\n  CUSTOM_OPS[name] = opMapper;\n}\n\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function getRegisteredOp(name: string): OpMapper {\n  return CUSTOM_OPS[name];\n}\n\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function deregisterOp(name: string) {\n  delete CUSTOM_OPS[name];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {clone, Tensor, util} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext, resourceManager?: ResourceManager): ValueType {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ?\n        undefined :\n        (inputParam.inputIndexEnd === undefined ? start + 1 :\n                                                  inputParam.inputIndexEnd);\n    if (inputParam.type === 'tensor') {\n      return getTensor(\n          node.inputNames[inputParam.inputIndexStart], tensorMap, context,\n          resourceManager);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n\n      return inputs.map(\n          name => getTensor(name, tensorMap, context, resourceManager));\n    }\n    const tensor = getTensor(\n        node.inputNames.slice(start)[0], tensorMap, context, resourceManager);\n    const data = tensor.dataSync();\n    return inputParam.type === 'number' ?\n        data[0] :\n        util.toNestedArray(tensor.shape, data);\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n\n/**\n * Retrieve the tensor from tensorsMap based on input name.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager?: ResourceManager): Tensor {\n  const [nodeName, index] = parseNodeName(name);\n\n  if (resourceManager != null) {\n    const tensor = resourceManager.getHashTableHandleByName(nodeName);\n    if (tensor != null) {\n      return tensor;\n    }\n  }\n\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number] {\n  const [nodeName, index] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number] {\n  const parts = name.split(':');\n  if (parts.length === 1) {\n    return [name, 0];\n  }\n\n  const nodeName = parts[0];\n  return [nodeName, Number(parts[parts.length - 1])];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\nexport function getPadding(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  let pad = getParamValue('pad', node, tensorMap, context);\n  if (pad === 'explicit') {\n    // This is 1d array, we need to convert it to 2d array\n    pad = getParamValue('explicitPaddings', node, tensorMap, context);\n    const explicitPadding: [\n      [number, number], [number, number], [number, number], [number, number]\n    ] = [[0, 0], [0, 0], [0, 0], [0, 0]];\n    for (let i = 0; i < 4; i++) {\n      explicitPadding[i][0] = (pad as number[])[i * 2];\n      explicitPadding[i][1] = (pad as number[])[i * 2 + 1];\n    }\n    return explicitPadding;\n  }\n  return pad;\n}\n\n/**\n *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to\n *  avoid disposal. This is important for TensorArray and TensorList ops, since\n *  internally they use a tensor as the id for TensorArray and TensorList, and\n * to simplify lookup, they also use Tensor.id as the key to the internal map.\n * These id tensors have been marked as kept in the backend, we need avoid clone\n * them in order to create new Tensor.id.\n * @param tensor\n */\nexport function cloneTensor(tensor: Tensor): Tensor {\n  return tensor.kept ? tensor : clone(tensor);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Add',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddV2',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddN',\n    'category': 'arithmetic',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'BiasAdd',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Sub',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'RealDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Div',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'DivNoNan',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mul',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Maximum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Minimum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Pow',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SquaredDifference',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorMod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Abs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan2',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ceil',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ClipByValue',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'clipValueMin', 'type': 'number'},\n      {'start': 2, 'name': 'clipValueMax', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Complex',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'real', 'type': 'tensor'},\n      {'start': 1, 'name': 'imag', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ComplexAbs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Elu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Exp',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Floor',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Imag',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Neg',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Real',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'alpha', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu6',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Selu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sigmoid',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Rsqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Square',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sign',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Round',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Expm1',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log1p',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Reciprocal',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Softplus',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Erf',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axes', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LeakyRelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'EmptyTensorList',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 1, 'name': 'maxNumElements', 'type': 'number'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'LoopCond',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'pred', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Switch',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'data', 'type': 'tensor'},\n      {'start': 1, 'name': 'pred', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Merge',\n    'category': 'control',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Enter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'frame_name', 'name': 'frameName', 'type': 'string'},\n      {'tfName': 'is_constant', 'name': 'isConstant', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'Exit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NextIteration',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'size', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'dynamic_size', 'name': 'dynamicSize', 'type': 'bool'},\n      {'tfName': 'clear_after_read', 'name': 'clearAfterRead', 'type': 'bool'},\n      {\n        'tfName': 'identical_element_shapes',\n        'name': 'identicalElementShapes',\n        'type': 'bool'\n      },\n      {'tfName': 'tensor_array_name', 'name': 'name', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayWriteV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayReadV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{\n      'tfName': 'dtype',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  },\n  {\n    'tfOpName': 'TensorArrayGatherV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayScatterV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArrayConcatV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}, {\n        'tfName': 'element_shape_except0',\n        'name': 'elementShapeExcept0',\n        'type': 'shape',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySplitV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArraySizeV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayCloseV3',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'tensorArrayId', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'StatelessIf',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'cond', 'type': 'tensor'},\n      {'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors'}\n    ],\n    'attrs': [\n      {'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func'},\n      {'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'If',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'cond', 'type': 'tensor'},\n      {'start': 1, 'end': 0, 'name': 'args', 'type': 'tensors'}\n    ],\n    'attrs': [\n      {'tfName': 'then_branch', 'name': 'thenBranch', 'type': 'func'},\n      {'tfName': 'else_branch', 'name': 'elseBranch', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'StatelessWhile',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'cond', 'name': 'cond', 'type': 'func'},\n      {'tfName': 'body', 'name': 'body', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'While',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'cond', 'name': 'cond', 'type': 'func'},\n      {'tfName': 'body', 'name': 'body', 'type': 'func'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorListScatter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'}\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListScatterV2',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 3, 'name': 'numElements', 'type': 'number'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListGather',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListGetItem',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListSetItem',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListReserve',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 1, 'name': 'numElements', 'type': 'number'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListFromTensor',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'}\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListStack',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs': [\n      {'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'},\n      {'tfName': 'num_elements', 'name': 'numElements', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorListSplit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListConcat',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorListPopBack',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'elementShape', 'type': 'shape'},\n    ],\n    'attrs':\n        [{'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorListPushBack',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorListId', 'type': 'tensor'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'element_dtype', 'name': 'elementDType', 'type': 'dtype'}\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'AvgPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'}, {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': [],\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPoolWithArgmax',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'}, {\n        'tfName': 'include_batch_in_index',\n        'name': 'includeBatchInIndex',\n        'type': 'bool'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AvgPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Conv1D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'stride', 'name': 'stride', 'type': 'number'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NWC'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'dilation',\n        'name': 'dilation',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'useCudnnOnGpu', 'name': 'useCudnnOnGpu', 'type': 'bool'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': '_FusedConv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'use_cudnn_on_gpu',\n        'name': 'useCudnnOnGpu',\n        'type': 'bool',\n        'defaultValue': true\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'leakyrelu_alpha',\n        'name': 'leakyreluAlpha',\n        'type': 'number'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2DBackpropInput',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 2, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 0, 'name': 'outputShape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2d',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'FusedDepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ],\n  },\n  {\n    'tfOpName': 'Dilation2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'rates', 'name': 'dilations', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Fill',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n      {'start': 1, 'name': 'value', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'LinSpace',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'num', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'OneHot',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'depth', 'type': 'number'},\n      {'start': 2, 'name': 'onValue', 'type': 'number', 'defaultValue': 1},\n      {'start': 3, 'name': 'offValue', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ones',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'OnesLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'RandomUniform',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'minval',\n        'name': 'minval',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'maxval',\n        'name': 'maxval',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Range',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'step', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [{'tfName': 'Tidx', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TruncatedNormal',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'means',\n        'name': 'mean',\n        'type': 'number',\n        'defaultValue': 0.0\n      },\n      {\n        'tfName': 'stddev',\n        'name': 'stdDev',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Zeros',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'ZerosLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'Multinomial',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'logits', 'type': 'tensor'},\n      {'start': 1, 'name': 'numSamples', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'},\n      {'tfName': 'seed2', 'name': 'seed2', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'output_dtype', 'name': 'output_dtype', 'type': 'dtype'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'NonMaxSuppressionV2',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV3',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV4',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'T_threshold',\n        'name': 'threshold',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {\n        'tfName': 'pad_to_max_output_size',\n        'name': 'padToMaxOutputSize',\n        'type': 'bool'\n      }\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV5',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'},\n      {'start': 5, 'name': 'softNmsSigma', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Where',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ListDiff',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'TopKV2',\n    'category': 'evaluation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'k', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'sorted', 'name': 'sorted', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Unique',\n    'category': 'evaluation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n  },\n  {\n    'tfOpName': 'UniqueV2',\n    'category': 'evaluation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'},\n    ],\n  },\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'PlaceholderWithDefault',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'default', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'Placeholder',\n    'category': 'graph',\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {'tfOpName': 'Const', 'category': 'graph'}, {\n    'tfOpName': 'Identity',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IdentityN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Snapshot',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Rank',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Size',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Shape',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'ShapeN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Print',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'data', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'message', 'name': 'message', 'type': 'string'}, {\n        'tfName': 'first_n',\n        'name': 'firstN',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfName': 'summarize',\n        'name': 'summarize',\n        'type': 'number',\n        'defaultValue': 3\n      }\n    ]\n  },\n  {'tfOpName': 'NoOp', 'category': 'graph', 'inputs': []}, {\n    'tfOpName': 'StopGradient',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'FakeQuantWithMinMaxVars',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'min', 'name': 'min', 'type': 'number'},\n      {'tfName': 'max', 'name': 'max', 'type': 'number'}\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'HashTable',\n    'category': 'hash_table',\n    'inputs': [],\n    'attrs': [\n      {'tfName': 'shared_name', 'name': 'sharedName', 'type': 'string'},\n      {\n        'tfName': 'use_node_name_sharing',\n        'name': 'useNodeNameSharing',\n        'type': 'bool'\n      },\n      {'tfName': 'key_dtype', 'name': 'keyDType', 'type': 'dtype'},\n      {'tfName': 'value_dtype', 'name': 'valueDType', 'type': 'dtype'},\n    ]\n  },\n  {\n    'tfOpName': 'HashTableV2',\n    'category': 'hash_table',\n    'inputs': [],\n    'attrs': [\n      {'tfName': 'shared_name', 'name': 'sharedName', 'type': 'string'},\n      {\n        'tfName': 'use_node_name_sharing',\n        'name': 'useNodeNameSharing',\n        'type': 'bool'\n      },\n      {'tfName': 'key_dtype', 'name': 'keyDType', 'type': 'dtype'},\n      {'tfName': 'value_dtype', 'name': 'valueDType', 'type': 'dtype'},\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableImport',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'},\n      {'start': 1, 'name': 'keys', 'type': 'tensor'},\n      {'start': 2, 'name': 'values', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableImportV2',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'},\n      {'start': 1, 'name': 'keys', 'type': 'tensor'},\n      {'start': 2, 'name': 'values', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableFind',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'},\n      {'start': 1, 'name': 'keys', 'type': 'tensor'},\n      {'start': 2, 'name': 'defaultValue', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LookupTableFindV2',\n    'category': 'hash_table',\n    'inputs': [\n      {'start': 0, 'name': 'tableHandle', 'type': 'tensor'},\n      {'start': 1, 'name': 'keys', 'type': 'tensor'},\n      {'start': 2, 'name': 'defaultValue', 'type': 'tensor'}\n    ],\n    'attrs': [\n      {'tfName': 'Tin', 'name': 'tIn', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'tOut',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ResizeBilinear',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'}, {\n        'tfName': 'half_pixel_centers',\n        'name': 'halfPixelCenters',\n        'type': 'bool'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ResizeNearestNeighbor',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'}, {\n        'tfName': 'half_pixel_centers',\n        'name': 'halfPixelCenters',\n        'type': 'bool'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'CropAndResize',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'image', 'type': 'tensor'},\n      {'start': 1, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 2, 'name': 'boxInd', 'type': 'tensor'},\n      {'start': 3, 'name': 'cropSize', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'method', 'name': 'method', 'type': 'string'}, {\n        'tfName': 'extrapolation_value',\n        'name': 'extrapolationValue',\n        'type': 'number'\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Equal',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NotEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Greater',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'GreaterEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Less',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LessEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalAnd',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalNot',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalOr',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Select',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SelectV2',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': '_FusedMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'}, {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMulV2',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Transpose',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'perm', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV3',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'depth_radius',\n        'name': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0},\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {\n        'tfName': 'beta',\n        'name': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': true,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Bincount',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number'},\n      {'start': 2, 'name': 'weights', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'DenseBincount',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number'},\n      {'start': 2, 'name': 'weights', 'type': 'tensor'}\n    ],\n    'attrs':\n        [{'tfName': 'binary_output', 'name': 'binaryOutput', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Max',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Mean',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Min',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Sum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'All',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Any',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'ArgMax',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'ArgMin',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Cumsum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'exclusive', 'name': 'exclusive', 'type': 'bool'},\n      {'tfName': 'reverse', 'name': 'reverse', 'type': 'bool'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ConcatV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': -1, 'name': 'tensors', 'type': 'tensors'},\n      {'start': -1, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs':\n        [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n  },\n  {\n    'tfOpName': 'Concat',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 1, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n      {'start': 0, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs': [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n\n  },\n  {\n    'tfOpName': 'GatherV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ],\n    'attrs': [{\n      'tfName': 'batch_dims',\n      'name': 'batchDims',\n      'type': 'number',\n      'defaultValue': 0\n    }]\n  },\n  {\n    'tfOpName': 'Gather',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'notSupported': true\n    }]\n  },\n  {\n    'tfOpName': 'Reverse',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'dims', 'type': 'bool[]'}\n    ]\n  },\n  {\n    'tfOpName': 'ReverseV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Slice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'size', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'StridedSlice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'end', 'type': 'number[]'},\n      {'start': 3, 'name': 'strides', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'begin_mask',\n        'name': 'beginMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'end_mask',\n        'name': 'endMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'new_axis_mask',\n        'name': 'newAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'ellipsis_mask',\n        'name': 'ellipsisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'shrink_axis_mask',\n        'name': 'shrinkAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Unpack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'num',\n        'name': 'num',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tile',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'reps', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Split',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'axis', 'type': 'number', 'defaultValue': 0},\n      {'start': 1, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'num_split',\n      'name': 'numOrSizeSplits',\n      'type': 'number',\n      'defaultValue': 1\n    }]\n  },\n  {\n    'tfOpName': 'SplitV',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'numOrSizeSplits', 'type': 'number[]'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'ScatterNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'values', 'type': 'tensor'},\n      {'start': 2, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': false,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IFFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'RFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IRFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Cast',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'SrcT',\n        'name': 'sdtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {'tfName': 'DstT', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'ExpandDims',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'MirrorPad',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'mode', 'name': 'mode', 'type': 'string'}]\n  },\n  {\n    'tfOpName': 'Pad',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'constant_value',\n      'name': 'constantValue',\n      'type': 'number',\n      'defaultValue': 0\n    }]\n  },\n  {\n    'tfOpName': 'PadV2',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'}, {\n        'start': 2,\n        'name': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reshape',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Squeeze',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'axis',\n      'tfDeprecatedName': 'squeeze_dims',\n      'name': 'axis',\n      'type': 'number[]'\n    }]\n  },\n  {\n    'tfOpName': 'SpaceToBatchND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'paddings', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'BatchToSpaceND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'crops', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthToSpace',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'block_size', 'name': 'blockSize', 'type': 'number'},\n      {'tfName': 'data_format', 'name': 'dataFormat', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'BroadcastTo',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': []\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\n\nimport {getRegisteredOp} from './custom_op/register';\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as hashTable from './op_list/hash_table';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as spectral from './op_list/spectral';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, logical, image, graph, matrices, normalization, reduction,\n      sliceJoin, spectral, transformation, hashTable\n    ];\n    const mappersJson: OpMapper[] = [].concat(...ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  // Converts the model inference graph from Tensorflow GraphDef to local\n  // representation for TensorFlow.js API\n  transformGraph(\n      graph: tensorflow.IGraphDef,\n      signature: tensorflow.ISignatureDef = {}): Graph {\n    const tfNodes = graph.node;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const initNodes: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      } else if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      } else if (node.input == null || node.input.length === 0) {\n        initNodes.push(map[node.name]);\n      }\n      return map;\n    }, {});\n\n    let inputs: Node[] = [];\n    const outputs: Node[] = [];\n    let inputNodeNameToKey: {[key: string]: string} = {};\n    let outputNodeNameToKey: {[key: string]: string} = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n\n    // if signature has not outputs set, add any node that does not have\n    // outputs.\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n\n    let functions = {};\n    if (graph.library != null && graph.library.function != null) {\n      functions = graph.library.function.reduce((functions, func) => {\n        functions[func.signature.name] = this.mapFunction(func);\n        return functions;\n      }, {} as {[key: string]: Graph});\n    }\n\n    const result: Graph =\n        {nodes, inputs, outputs, weights, placeholders, signature, functions};\n\n    if (initNodes.length > 0) {\n      result.initNodes = initNodes;\n    }\n\n    return result;\n  }\n\n  private mapSignatureEntries(entries: {[k: string]: tensorflow.ITensorInfo}) {\n    return Object.keys(entries || {})\n        .reduce<{[key: string]: string}>((prev, curr) => {\n          prev[entries[curr].name] = curr;\n          return prev;\n        }, {});\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper =\n        getRegisteredOp(node.op) || this.opMappers[node.op] || {} as OpMapper;\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.substr(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'string[]':\n                value = getStringArrayParam(\n                    node.attr, param.tfName, param.defaultValue as string[]);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string[]);\n                }\n                break;\n              case 'number':\n                value = getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'bool[]':\n                value = getBoolArrayParam(\n                    node.attr, param.tfName, param.defaultValue as boolean[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean[]);\n                }\n                break;\n              case 'shape':\n                value = getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'shape[]':\n                value = getTensorShapeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[][]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[][]);\n                }\n                break;\n              case 'dtype':\n                value = getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'dtype[]':\n                value = getDtypeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as DataType[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType[]);\n                }\n                break;\n              case 'func':\n                value = getFuncParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getFuncParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n\n  // map the TFunctionDef to TFJS graph object\n  private mapFunction(functionDef: tensorflow.IFunctionDef): Graph {\n    const tfNodes = functionDef.nodeDef;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    let nodes: {[key: string]: Node} = {};\n    if (tfNodes != null) {\n      nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n        map[node.name] = this.mapNode(node);\n        if (node.op === 'Const') {\n          weights.push(map[node.name]);\n        }\n        return map;\n      }, {});\n    }\n    const inputs: Node[] = [];\n    const outputs: Node[] = [];\n\n    functionDef.signature.inputArg.forEach(arg => {\n      const [nodeName, ] = getNodeNameAndIndex(arg.name);\n      const node: Node = {\n        name: nodeName,\n        op: 'Placeholder',\n        inputs: [],\n        inputNames: [],\n        category: 'graph',\n        inputParams: {},\n        attrParams: {dtype: {value: parseDtypeParam(arg.type), type: 'dtype'}},\n        children: []\n      };\n      node.signatureKey = arg.name;\n      inputs.push(node);\n      nodes[nodeName] = node;\n    });\n\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n\n    const returnNodeMap = functionDef.ret;\n\n    functionDef.signature.outputArg.forEach(output => {\n      const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n      const node = nodes[nodeName];\n      if (node != null) {\n        node.defaultOutput = index;\n        outputs.push(node);\n      }\n    });\n\n    const signature = this.mapArgsToSignature(functionDef);\n    return {nodes, inputs, outputs, weights, placeholders, signature};\n  }\n\n  private mapArgsToSignature(functionDef: tensorflow.IFunctionDef):\n      tensorflow.ISignatureDef {\n    return {\n      methodName: functionDef.signature.name,\n      inputs: functionDef.signature.inputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n      outputs: functionDef.signature.outputArg.reduce(\n          (map, arg) => {\n            map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n            return map;\n          },\n          {} as {[key: string]: tensorflow.ITensorInfo}),\n    };\n  }\n\n  private mapArgToTensorInfo(\n      arg: tensorflow.OpDef.IArgDef,\n      nameMap?: {[key: string]: string}): tensorflow.ITensorInfo {\n    let name = arg.name;\n    if (nameMap != null) {\n      name = nameMap[name];\n    }\n    return {name, dtype: arg.type};\n  }\n}\n\nexport function decodeBase64(text: string): string {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error(\n        'Unable to decode base64 in this environment. ' +\n        'Missing built-in atob() or Buffer()');\n  }\n}\n\nexport function parseStringParam(s: []|string, keepCase: boolean): string {\n  const value =\n      Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\n\nexport function getStringParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n    keepCase = false): string {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\n\nexport function getBoolParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean): boolean {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\n\nexport function getNumberParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number): number {\n  const param = attrs[name] || {};\n  const value =\n      param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n  return (typeof value === 'number') ? value : parseInt(value, 10);\n}\n\nexport function parseDtypeParam(value: string|tensorflow.DataType): DataType {\n  if (typeof (value) === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value as any];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n    case tensorflow.DataType.DT_INT8:\n    case tensorflow.DataType.DT_UINT8:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\n\nexport function getFuncParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: string): string {\n  const param = attrs[name];\n  if (param && param.func) {\n    return param.func.name;\n  }\n  return def;\n}\n\nexport function getDtypeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType): DataType {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\n\nexport function getDtypeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType[]): DataType[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\n\nexport function parseTensorShapeParam(shape: tensorflow.ITensorShape): number[]|\n    undefined {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(\n        dim =>\n            (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\n\nexport function getTensorShapeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def?: number[]): number[]|undefined {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\n\nexport function getNumericArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[]): number[] {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f :\n                                                   param.list.i) ||\n            [])\n        .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n  }\n  return def;\n}\n\nexport function getStringArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string[],\n    keepCase = false): string[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\n\nexport function getTensorShapeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[][]): number[][] {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\n\nexport function getBoolArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean[]): boolean[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {getTensor} from '../executors/utils';\nimport {getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam} from '../operation_mapper';\nimport {GraphNode, Node, ValueType} from '../types';\n\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl implements GraphNode {\n  public readonly inputs: Tensor[] = [];\n  public readonly attrs: {[key: string]: ValueType} = {};\n  constructor(\n      private node: Node, private tensorMap: NamedTensorsMap,\n      private context: ExecutionContext) {\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs)\n                       .reduce((attrs: {[key: string]: ValueType}, key) => {\n                         attrs[key] = this.getAttr(key);\n                         return attrs;\n                       }, {});\n    }\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getInput(name: string): Tensor {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getAttr(name: string, defaultValue?: ValueType): ValueType {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue as number);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue as string);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue as boolean);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(\n          this.node.rawAttrs, name, defaultValue as number[]);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue as DataType);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[]);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(\n            this.node.rawAttrs, name, defaultValue as string[]);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[][]);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(\n            this.node.rawAttrs, name, defaultValue as boolean[]);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(\n            this.node.rawAttrs, name, defaultValue as DataType[]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function assertShapesMatchAllowUndefinedSize(\n    shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n  util.assert(\n      shapesEqualAllowUndefinedSize(shapeA, shapeB),\n      () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\n\nexport function shapesEqualAllowUndefinedSize(n1: number[], n2: number[]) {\n  if (n1.length !== n2.length) {\n    return false;\n  }\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize} from './tensor_utils';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly idTensor: Tensor;\n  constructor(\n      readonly name: string, readonly dtype: DataType, private maxSize: number,\n      private elementShape: number[], readonly identicalElementShapes: boolean,\n      readonly dynamicSize: boolean, readonly clearAfterRead: boolean) {\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n\n  get id() {\n    return this.idTensor.id;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n        tensor.tensor.dispose();\n      }\n    });\n    this.tensors = [];\n    this.closed_ = true;\n    this.idTensor.dispose();\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.size()}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    keep(tensor);\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize} from './tensor_utils';\n\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\n\nexport class TensorList {\n  readonly idTensor: Tensor;\n  maxNumElements: number;\n\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(\n      readonly tensors: Tensor[], readonly elementShape: number[],\n      readonly elementDtype: DataType, maxNumElements = -1) {\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(`Invalid data types; op elements ${\n              elementDtype}, but list elements ${tensor.dtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(\n            elementShape, tensor.shape, 'TensorList shape mismatch: ');\n\n        keep(tensor);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n  copy(): TensorList {\n    return new TensorList(\n        [...this.tensors], this.elementShape, this.elementDtype);\n  }\n\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.id)) {\n        tensor.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n  size() {\n    return this.tensors.length;\n  }\n\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n  stack(elementShape: number[], elementDtype: DataType, numElements = -1):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${\n          numElements} elements but got a list with ${\n          this.tensors.length} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(\n        elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    return tidy(() => {\n      const reshapedTensors =\n          this.tensors.map(tensor => reshape(tensor, elementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n  popBack(elementShape: number[], elementDtype: DataType): Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n\n    const tensor = this.tensors.pop();\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, elementShape, 'TensorList shape mismatch: ');\n    return reshape(tensor, elementShape);\n  }\n\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n  pushBack(tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n  resize(size: number) {\n    if (size < 0) {\n      throw new Error(\n          `TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${\n          size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n    this.tensors.length = size;\n  }\n\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n  getItem(elementIndex: number, elementShape: number[], elementDtype: DataType):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${\n          elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.tensors[elementIndex].shape, elementShape,\n        'TensorList shape mismatch: ');\n\n    return this.tensors[elementIndex];\n  }\n\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n  setItem(elementIndex: number, tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 ||\n        this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${\n          elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor);\n    this.tensors[elementIndex] = tensor;\n  }\n\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  gather(indices: number[], elementDtype: DataType, elementShape: number[]):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n    // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n    indices = indices.slice(0, this.size());\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    return tidy(() => {\n      const tensors = indices.map(i => reshape(this.tensors[i], elementShape));\n      return stack(tensors, 0);\n    });\n  }\n\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  concat(elementDtype: DataType, elementShape: number[]): Tensor {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${\n          this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    return tidy(() => {\n      const tensors = this.tensors.map(t => reshape(t, elementShape));\n      return concat(tensors, 0);\n    });\n  }\n}\n\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(\n    tensor: Tensor, elementShape: number[], elementDtype: DataType) {\n  const dtype = tensor.dtype;\n  if (tensor.shape.length < 1) {\n    throw new Error(\n        `Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n  }\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${\n        tensor.dtype}, but list elements ${elementDtype}`);\n  }\n  const outputShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(\n      outputShape, elementShape, 'TensorList shape mismatch: ');\n\n  const tensorList: Tensor[] = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n */\nexport function reserve(\n    elementShape: number[], elementDtype: DataType, numElements: number) {\n  return new TensorList([], elementShape, elementDtype, numElements);\n}\n\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(\n    tensor: Tensor, indices: number[], elementShape: number[],\n    numElements?: number): TensorList {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n        indices.length} vs. ${tensor.shape[0]}`);\n  }\n\n  const maxIndex = Math.max(...indices);\n\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(\n        `Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(\n    tensor: Tensor, length: number[], elementShape: number[]) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n  }\n\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors: Tensor[] = tidy(() => {\n    const tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(slice(tensor, indices, sizes), elementShape);\n    }\n    tensor.dispose();\n    return tensors;\n  });\n\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, scalar, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {fromTensor, reserve, scatter, split} from '../../executor/tensor_list';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'If':\n    case 'StatelessIf': {\n      const thenFunc =\n          getParamValue('thenBranch', node, tensorMap, context) as string;\n      const elseFunc =\n          getParamValue('elseBranch', node, tensorMap, context) as string;\n      const cond = getParamValue('cond', node, tensorMap, context) as Tensor;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n      const condValue = await cond.data();\n      if (condValue[0]) {\n        return context.functionMap[thenFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      } else {\n        return context.functionMap[elseFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      }\n    }\n    case 'While':\n    case 'StatelessWhile': {\n      const bodyFunc =\n          getParamValue('body', node, tensorMap, context) as string;\n      const condFunc =\n          getParamValue('cond', node, tensorMap, context) as string;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n\n      // Calculate the condition of the loop\n      const condResult =\n          (await context.functionMap[condFunc].executeFunctionAsync(\n              args, context.tensorArrayMap, context.tensorListMap));\n      const argIds = args.map(tensor => tensor.id);\n      let condValue = await condResult[0].data();\n      // Dispose the intermediate tensors for condition function\n      condResult.forEach(tensor => {\n        if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n\n      let result: Tensor[] = args;\n\n      while (condValue[0]) {\n        // Record the previous result for intermediate tensor tracking\n        const origResult = result;\n        // Execution the body of the loop\n        result = await context.functionMap[bodyFunc].executeFunctionAsync(\n            result, context.tensorArrayMap, context.tensorListMap);\n        const resultIds = result.map(tensor => tensor.id);\n\n        // Dispose the intermediate tensor for body function that is not global\n        // kept, not input/output of the body function\n        origResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n\n        // Recalcuate the condition of the loop using the latest results.\n        const condResult =\n            (await context.functionMap[condFunc].executeFunctionAsync(\n                result, context.tensorArrayMap, context.tensorListMap));\n        condValue = await condResult[0].data();\n        // Dispose the intermediate tensors for condition function\n        condResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n      }\n      return result;\n    }\n    case 'LoopCond': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      return [cloneTensor(pred)];\n    }\n    case 'Switch': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      let data = getParamValue('data', node, tensorMap, context) as Tensor;\n      if (!data.kept) {\n        data = cloneTensor(data);\n      }\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n    }\n    case 'Merge': {\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      if (inputName) {\n        const data = getTensor(inputName, tensorMap, context);\n        return [cloneTensor(data)];\n      }\n      return undefined;\n    }\n    case 'Enter': {\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.enterFrame(frameId);\n      return [cloneTensor(data)];\n    }\n    case 'Exit': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.exitFrame();\n      return [cloneTensor(data)];\n    }\n    case 'NextIteration': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.nextIteration();\n      return [cloneTensor(data)];\n    }\n    case 'TensorArrayV3': {\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [tensorArray.idTensor, scalar(1.0)];\n    }\n    case 'TensorArrayWriteV3': {\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const writeTensorArray = context.getTensorArray(id.id);\n      writeTensorArray.write(index, writeTensor);\n      return [writeTensorArray.idTensor];\n    }\n    case 'TensorArrayReadV3': {\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId.id);\n      return [readTensorArray.read(readIndex)];\n    }\n    case 'TensorArrayGatherV3': {\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId.id);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n    }\n    case 'TensorArrayScatterV3': {\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId.id);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scatterTensorArray.idTensor];\n    }\n    case 'TensorArrayConcatV3': {\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const concatTensorArray = context.getTensorArray(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      return [concatTensorArray.concat(concatDtype)];\n    }\n    case 'TensorArraySplitV3': {\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId.id);\n      splitTensorArray.split(lengths, splitTensor);\n      return [splitTensorArray.idTensor];\n    }\n    case 'TensorArraySizeV3': {\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const sizeTensorArray = context.getTensorArray(sizeId.id);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n    }\n    case 'TensorArrayCloseV3': {\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const closeTensorArray = context.getTensorArray(closeId.id);\n      closeTensorArray.clearAndClose();\n      return [closeTensorArray.idTensor];\n    }\n    case 'TensorListSetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.setItem(index, writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.getItem(readIndex, elementShape, elementDType)];\n    }\n    case 'TensorListScatterV2':\n    case 'TensorListScatter': {\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList =\n          scatter(scatterTensor, scatterIndices, elementShape, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListReserve':\n    case 'EmptyTensorList': {\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      let numElementsParam;\n\n      if (node.op === 'TensorListReserve') {\n        numElementsParam = 'numElements';\n      } else {\n        numElementsParam = 'maxNumElements';\n      }\n\n      const numElements =\n          getParamValue(numElementsParam, node, tensorMap, context) as number;\n\n      const tensorList = reserve(elementShape, elementDtype, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGather': {\n      const gatherId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(gatherId.id);\n      return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n    }\n    case 'TensorListStack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.stack(elementShape, elementDtype, numElements)];\n    }\n    case 'TensorListFromTensor': {\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = fromTensor(tensor, elementShape, elementDtype);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListConcat': {\n      const concatId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      return [tensorList.concat(concatDtype, elementShape)];\n    }\n    case 'TensorListPushBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.pushBack(writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListPopBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.popBack(elementShape, elementDType)];\n    }\n    case 'TensorListSplit': {\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n\n      const tensorList = split(splitTensor, lengths, elementShape);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'control';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Rank, Tensor, Tensor3D, Tensor4D, Tensor5D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getPadding, getParamValue} from './utils';\n\nfunction fusedConvAndDepthWiseParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const [extraOp, activationFunc] =\n      (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n  const isBiasAdd = extraOp === 'biasadd';\n  const isPrelu = activationFunc === 'prelu';\n  const isBatchNorm = extraOp === 'fusedbatchnorm';\n\n  const numArgs =\n      (getParamValue('numArgs', node, tensorMap, context) as number);\n  if (isBiasAdd) {\n    if (isPrelu && numArgs !== 2) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n          'must have two extra arguments: bias and alpha.');\n    }\n    if (!isPrelu && numArgs !== 1) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n          'one extra argument: bias.');\n    }\n  }\n  if (isBatchNorm) {\n    throw new Error(\n        'FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.');\n  }\n  const stride = getParamValue('strides', node, tensorMap, context) as number[];\n  const pad = getPadding(node, tensorMap, context);\n  const dataFormat =\n      (getParamValue('dataFormat', node, tensorMap, context) as string)\n          .toUpperCase();\n  const dilations =\n      getParamValue('dilations', node, tensorMap, context) as number[];\n  const [biasArg, preluArg] =\n      getParamValue('args', node, tensorMap, context) as Tensor[];\n  const leakyreluAlpha =\n      getParamValue('leakyreluAlpha', node, tensorMap, context) as number;\n\n  return {\n    stride,\n    pad,\n    dataFormat,\n    dilations,\n    biasArg,\n    preluArg,\n    activationFunc,\n    leakyreluAlpha\n  };\n}\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Conv1D': {\n          const stride =\n              getParamValue('stride', node, tensorMap, context) as number;\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilation =\n              getParamValue('dilation', node, tensorMap, context) as number;\n          return [tfOps.conv1d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D,\n              getParamValue('filter', node, tensorMap, context) as Tensor3D,\n              stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n              dilation)];\n        }\n        case 'Conv2D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfOps.conv2d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case '_FusedConv2D': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc,\n            leakyreluAlpha\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [tfOps.fused.conv2d({\n            x: getParamValue('x', node, tensorMap, context) as Tensor3D |\n                Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n        }\n\n        case 'FusedDepthwiseConv2dNative': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc,\n            leakyreluAlpha,\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [tfOps.fused.depthwiseConv2d({\n            x: getParamValue('x', node, tensorMap, context) as Tensor3D |\n                Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n        }\n        case 'Conv2DBackpropInput':\n        case 'Conv2dTranspose': {\n          const shape = getParamValue(\n                            'outputShape', node, tensorMap,\n                            context) as [number, number, number] |\n              [number, number, number, number];\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          return [tfOps.conv2dTranspose(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n        }\n        case 'DepthwiseConv2dNative':\n        case 'DepthwiseConv2d': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n\n          return [tfOps.depthwiseConv2d(\n              getParamValue('input', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case 'Conv3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfOps.conv3d(\n              getParamValue('x', node, tensorMap, context) as Tensor4D |\n                  Tensor<Rank.R5>,\n              getParamValue('filter', node, tensorMap, context) as\n                  Tensor<Rank.R5>,\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same',\n              dataFormat as 'NDHWC' | 'NCDHW',\n              [dilations[1], dilations[2], dilations[3]])];\n        }\n        case 'AvgPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.avgPool(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.maxPool(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPoolWithArgmax': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n          const includeBatchInIndex =\n              getParamValue('includeBatchInIndex', node, tensorMap, context) as\n              boolean;\n          const {result, indexes} = tfOps.maxPoolWithArgmax(\n              getParamValue('x', node, tensorMap, context) as Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same', includeBatchInIndex);\n          return [result, indexes];\n        }\n        case 'AvgPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.avgPool3d(\n              getParamValue('x', node, tensorMap, context) as Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'MaxPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.maxPool3d(\n              getParamValue('x', node, tensorMap, context) as Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'Dilation2D': {\n          const strides =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n\n          // strides: [1, stride_height, stride_width, 1].\n          const strideHeight = strides[1];\n          const strideWidth = strides[2];\n\n          // dilations: [1, dilation_height, dilation_width, 1].\n          const dilationHeight = dilations[1];\n          const dilationWidth = dilations[2];\n\n          return [tfOps.dilation2d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor3D,\n              [strideHeight, strideWidth], pad as 'valid' | 'same',\n              [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];\n        }\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'convolution';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nfunction nmsParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const boxes = getParamValue('boxes', node, tensorMap, context) as Tensor;\n  const scores = getParamValue('scores', node, tensorMap, context) as Tensor;\n  const maxOutputSize =\n      getParamValue('maxOutputSize', node, tensorMap, context) as number;\n  const iouThreshold =\n      getParamValue('iouThreshold', node, tensorMap, context) as number;\n  const scoreThreshold =\n      getParamValue('scoreThreshold', node, tensorMap, context) as number;\n  const softNmsSigma =\n      getParamValue('softNmsSigma', node, tensorMap, context) as number;\n\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5': {\n      const {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n      } = nmsParams(node, tensorMap, context);\n\n      const result = await tfOps.image.nonMaxSuppressionWithScoreAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, softNmsSigma);\n\n      return [result.selectedIndices, result.selectedScores];\n    }\n    case 'NonMaxSuppressionV4': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      const padToMaxOutputSize =\n          getParamValue('padToMaxOutputSize', node, tensorMap, context) as\n          boolean;\n\n      const result = await tfOps.image.nonMaxSuppressionPaddedAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, padToMaxOutputSize);\n\n      return [result.selectedIndices, result.validOutputs];\n    }\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      return [await tfOps.image.nonMaxSuppressionAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold)];\n    }\n    case 'Where': {\n      const condition = tfOps.cast(\n          (getParamValue('condition', node, tensorMap, context) as Tensor),\n          'bool');\n      const result = [await tfOps.whereAsync(condition)];\n      condition.dispose();\n      return result;\n    }\n    case 'ListDiff': {\n      return tfOps.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as Tensor,\n          getParamValue('y', node, tensorMap, context) as Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'dynamic';\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DataType, keep, scalar, stack, Tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n  readonly handle: Tensor;\n\n  // tslint:disable-next-line: no-any\n  private tensorMap: Map<any, Tensor>;\n\n  get id() {\n    return this.handle.id;\n  }\n\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(readonly keyDType: DataType, readonly valueDType: DataType) {\n    this.handle = scalar(0);\n    // tslint:disable-next-line: no-any\n    this.tensorMap = new Map<any, Tensor>();\n\n    keep(this.handle);\n  }\n\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n\n  /**\n   * The number of items in the hash table.\n   */\n  size(): number {\n    return this.tensorMap.size;\n  }\n\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n  async import(keys: Tensor, values: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, values);\n\n    // We only store the primitive values of the keys, this allows lookup\n    // to be O(1).\n    const $keys = await keys.data();\n\n    // Clear the hashTable before inserting new values.\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n\n    return tidy(() => {\n      const $values = unstack(values);\n\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n\n      util.assert(\n          keysLength === valuesLength,\n          () => `The number of elements doesn't match, keys has ` +\n              `${keysLength} elements, the values has ${valuesLength} ` +\n              `elements.`);\n\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n\n      return this.handle;\n    });\n  }\n\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n  async find(keys: Tensor, defaultValue: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n\n    const $keys = await keys.data();\n\n    return tidy(() => {\n      const result: Tensor[] = [];\n\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n\n      return stack(result);\n    });\n  }\n\n  // tslint:disable-next-line: no-any\n  private findWithDefault(key: any, defaultValue: Tensor): Tensor {\n    const result = this.tensorMap.get(key);\n\n    return result != null ? result : defaultValue;\n  }\n\n  private checkKeyAndValueTensor(key: Tensor, value: Tensor) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(\n          `Expect key dtype ${this.keyDType}, but got ` +\n          `${key.dtype}`);\n    }\n\n    if (value.dtype !== this.valueDType) {\n      throw new Error(\n          `Expect value dtype ${this.valueDType}, but got ` +\n          `${value.dtype}`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\nimport {ResourceManager} from '../executor/resource_manager';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager?: ResourceManager): tfc.Tensor[]|Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return tfc.tidy(\n                () => arithmetic.executeOp(node, tensorMap, context));\n          case 'basic_math':\n            return tfc.tidy(\n                () => basicMath.executeOp(node, tensorMap, context));\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return tfc.tidy(\n                () => convolution.executeOp(node, tensorMap, context));\n          case 'creation':\n            return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return tfc.tidy(\n                () => evaluation.executeOp(node, tensorMap, context));\n          case 'image':\n            return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n          case 'graph':\n            return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n          case 'logical':\n            return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n          case 'matrices':\n            return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n          case 'normalization':\n            return tfc.tidy(\n                () => normalization.executeOp(node, tensorMap, context));\n          case 'reduction':\n            return tfc.tidy(\n                () => reduction.executeOp(node, tensorMap, context));\n          case 'slice_join':\n            return tfc.tidy(\n                () => sliceJoin.executeOp(node, tensorMap, context));\n          case 'spectral':\n            return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n          case 'transformation':\n            return tfc.tidy(\n                () => transformation.executeOp(node, tensorMap, context));\n          case 'hash_table':\n            return hashTable.executeOp(\n                node, tensorMap, context, resourceManager);\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (tfc.util.isPromise(value)) {\n    return (value as Promise<tfc.Tensor>).then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'BiasAdd':\n        case 'AddV2':\n        case 'Add': {\n          return [tfOps.add(\n              (getParamValue('a', node, tensorMap, context) as Tensor),\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'AddN': {\n          return [tfOps.addN((\n              getParamValue('tensors', node, tensorMap, context) as Tensor[]))];\n        }\n        case 'FloorMod':\n        case 'Mod':\n          return [tfOps.mod(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        case 'Mul':\n          return [tfOps.mul(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        case 'RealDiv':\n        case 'Div': {\n          return [tfOps.div(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'DivNoNan': {\n          return [tfOps.divNoNan(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'FloorDiv': {\n          return [tfOps.floorDiv(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sub': {\n          return [tfOps.sub(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Minimum': {\n          return [tfOps.minimum(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Maximum': {\n          return [tfOps.maximum(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Pow': {\n          return [tfOps.pow(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'SquaredDifference': {\n          return [tfOps.squaredDifference(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'arithmetic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Abs':\n        case 'ComplexAbs':\n          return [tfOps.abs(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Acos':\n          return [tfOps.acos(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Acosh':\n          return [tfOps.acosh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Asin':\n          return [tfOps.asin(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Asinh':\n          return [tfOps.asinh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Atan':\n          return [tfOps.atan(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Atan2':\n          return [tfOps.atan2(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('y', node, tensorMap, context) as Tensor)];\n        case 'Atanh':\n          return [tfOps.atanh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Ceil':\n          return [tfOps.ceil(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Complex':\n          return [tfOps.complex(\n              getParamValue('real', node, tensorMap, context) as Tensor,\n              getParamValue('imag', node, tensorMap, context) as Tensor)];\n        case 'Cos':\n          return [tfOps.cos(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Cosh':\n          return [tfOps.cosh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Elu':\n          return [tfOps.elu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Erf':\n          return [tfOps.erf(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Exp':\n          return [tfOps.exp(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Expm1': {\n          return [tfOps.expm1(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Floor':\n          return [tfOps.floor(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Log':\n          return [tfOps.log(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Log1p': {\n          return [tfOps.log1p(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Imag':\n          return [tfOps.imag(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n\n        case 'Neg':\n          return [tfOps.neg(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Reciprocal': {\n          return [tfOps.reciprocal(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Real':\n          return [tfOps.real(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Relu':\n          return [tfOps.relu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Round': {\n          return [tfOps.round(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Selu':\n          return [tfOps.selu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sigmoid':\n          return [tfOps.sigmoid(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sin':\n          return [tfOps.sin(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sign': {\n          return [tfOps.sign(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sinh': {\n          return [tfOps.sinh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Softplus': {\n          return [tfOps.softplus(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sqrt': {\n          return [tfOps.sqrt(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Square': {\n          return [tfOps.square(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Tanh': {\n          return [tfOps.tanh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Tan':\n          return [tfOps.tan(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'ClipByValue':\n          return [tfOps.clipByValue(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('clipValueMin', node, tensorMap, context) as number,\n              getParamValue('clipValueMax', node, tensorMap, context) as\n                  number)];\n        case 'Relu6':\n          return [tfOps.relu6(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Rsqrt':\n          return [tfOps.rsqrt(\n              getTensor(node.inputNames[0], tensorMap, context))];\n        case 'Prod':\n          return [tfOps.prod(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('axes', node, tensorMap, context) as number[])];\n        case 'LeakyRelu':\n          return [tfOps.leakyRelu(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('alpha', node, tensorMap, context) as number)];\n        case 'Prelu':\n          return [tfOps.prelu(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('alpha', node, tensorMap, context) as Tensor)];\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'basic_math';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor, Tensor1D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Fill': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const dtype =\n              getParamValue('dtype', node, tensorMap, context) as DataType;\n          const value =\n              getParamValue('value', node, tensorMap, context) as number;\n          return [tfOps.fill(shape, value, dtype)];\n        }\n        case 'LinSpace': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const num = getParamValue('num', node, tensorMap, context) as number;\n          return [tfOps.linspace(start, stop, num)];\n        }\n        case 'Multinomial': {\n          const logits =\n              getParamValue('logits', node, tensorMap, context) as Tensor1D;\n          const numSamples =\n              getParamValue('numSamples', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [tfOps.multinomial(logits, numSamples, seed)];\n        }\n        case 'OneHot': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          const depth =\n              getParamValue('depth', node, tensorMap, context) as number;\n          const onValue =\n              getParamValue('onValue', node, tensorMap, context) as number;\n          const offValue =\n              getParamValue('offValue', node, tensorMap, context) as number;\n          return [tfOps.oneHot(indices, depth, onValue, offValue)];\n        }\n        case 'Ones': {\n          return [tfOps.ones(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'OnesLike': {\n          return [tfOps.onesLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'RandomUniform': {\n          return [tfOps.randomUniform(\n              // tslint:disable-next-line:no-any\n              getParamValue('shape', node, tensorMap, context) as any,\n              getParamValue('minval', node, tensorMap, context) as number,\n              getParamValue('maxval', node, tensorMap, context) as number,\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'Range': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const step =\n              getParamValue('step', node, tensorMap, context) as number;\n          return [tfOps.range(\n              start, stop, step,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32')];\n        }\n        case 'TruncatedNormal': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const mean =\n              getParamValue('mean', node, tensorMap, context) as number;\n          const stdDev =\n              getParamValue('stdDev', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [tfOps.truncatedNormal(\n              shape, mean, stdDev,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32',\n              seed)];\n        }\n        case 'Zeros': {\n          return [tfOps.zeros(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'ZerosLike': {\n          return [tfOps.zerosLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'creation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext):\n        Tensor[] => {\n          switch (node.op) {\n            case 'TopKV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const k = getParamValue('k', node, tensorMap, context) as number;\n              const sorted =\n                  getParamValue('sorted', node, tensorMap, context) as boolean;\n              const result = tfOps.topk(x, k, sorted);\n              return [result.values, result.indices];\n            }\n            case 'Unique': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const result = tfOps.unique(x);\n              return [result.values, result.indices];\n            }\n            case 'UniqueV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const axis =\n                  getParamValue('axis', node, tensorMap, context) as number;\n              const result = tfOps.unique(x, axis);\n              return [result.values, result.indices];\n            }\n            default:\n              throw TypeError(`Node type ${node.op} is not implemented`);\n          }\n        };\n\nexport const CATEGORY = 'evaluation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'ResizeBilinear': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number[];\n          const alignCorners =\n              getParamValue('alignCorners', node, tensorMap, context) as\n              boolean;\n          const halfPixelCenters =\n              getParamValue('halfPixelCenters', node, tensorMap, context) as\n              boolean;\n          return [tfOps.image.resizeBilinear(\n              images as Tensor3D | Tensor4D, [size[0], size[1]], alignCorners,\n              halfPixelCenters)];\n        }\n        case 'ResizeNearestNeighbor': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number[];\n          const alignCorners =\n              getParamValue('alignCorners', node, tensorMap, context) as\n              boolean;\n          const halfPixelCenters =\n              getParamValue('halfPixelCenters', node, tensorMap, context) as\n              boolean;\n          return [tfOps.image.resizeNearestNeighbor(\n              images as Tensor3D | Tensor4D, [size[0], size[1]], alignCorners,\n              halfPixelCenters)];\n        }\n        case 'CropAndResize': {\n          const image =\n              getParamValue('image', node, tensorMap, context) as Tensor;\n          const boxes =\n              getParamValue('boxes', node, tensorMap, context) as Tensor;\n          const boxInd =\n              getParamValue('boxInd', node, tensorMap, context) as Tensor;\n          const cropSize =\n              getParamValue('cropSize', node, tensorMap, context) as number[];\n          const method =\n              getParamValue('method', node, tensorMap, context) as string;\n          const extrapolationValue =\n              getParamValue('extrapolationValue', node, tensorMap, context) as\n              number;\n          return [tfOps.image.cropAndResize(\n              image as Tensor4D, boxes as Tensor2D, boxInd as Tensor1D,\n              cropSize as [number, number], method as 'bilinear' | 'nearest',\n              extrapolationValue)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'image';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Const': {\n          return tensorMap[node.name];\n        }\n        case 'PlaceholderWithDefault':\n          const def =\n              getParamValue('default', node, tensorMap, context) as Tensor;\n          return [getTensor(node.name, tensorMap, context) || def];\n        case 'Placeholder':\n          return [getTensor(node.name, tensorMap, context)];\n        case 'Identity':\n        case 'StopGradient':\n        case 'FakeQuantWithMinMaxVars': {  // This op is currently ignored.\n          const data = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [cloneTensor(data)];\n        }\n        case 'IdentityN':\n          return (getParamValue('x', node, tensorMap, context) as Tensor[])\n              .map((t: Tensor) => cloneTensor(t));\n        case 'Snapshot':\n          const snapshot =\n              (getParamValue('x', node, tensorMap, context) as Tensor);\n          return [cloneTensor(snapshot)];\n        case 'Shape':\n          return [tfOps.tensor1d(\n              (getParamValue('x', node, tensorMap, context) as Tensor).shape,\n              'int32')];\n        case 'ShapeN':\n          return (getParamValue('x', node, tensorMap, context) as Tensor[])\n              .map((t: Tensor) => tfOps.tensor1d(t.shape));\n        case 'Size':\n          return [tfOps.scalar(\n              (getParamValue('x', node, tensorMap, context) as Tensor).size,\n              'int32')];\n        case 'Rank':\n          return [tfOps.scalar(\n              (getParamValue('x', node, tensorMap, context) as Tensor).rank,\n              'int32')];\n        case 'NoOp':\n          return [tfOps.scalar(1)];\n        case 'Print':\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const data =\n              getParamValue('data', node, tensorMap, context) as Tensor[];\n          const message =\n              getParamValue('message', node, tensorMap, context) as string;\n          const summarize =\n              getParamValue('summarize', node, tensorMap, context) as number;\n          console.warn(\n              'The graph has a tf.print() operation,' +\n              'usually used for debugging, which slows down performance.');\n          console.log(message);\n          for (let i = 0; i < data.length; i++) {\n            console.log(Array.prototype.slice.call(data[i].dataSync())\n                            .slice(0, summarize));\n          }\n          return [input];\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'graph';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Equal': {\n          return [tfOps.equal(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'NotEqual': {\n          return [tfOps.notEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Greater': {\n          return [tfOps.greater(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'GreaterEqual': {\n          return [tfOps.greaterEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Less': {\n          return [tfOps.less(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LessEqual': {\n          return [tfOps.lessEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalAnd': {\n          return [tfOps.logicalAnd(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalNot': {\n          return [tfOps.logicalNot(\n              getParamValue('a', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalOr': {\n          return [tfOps.logicalOr(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Select':\n        case 'SelectV2': {\n          return [tfOps.where(\n              getParamValue('condition', node, tensorMap, context) as Tensor,\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'logical';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'BatchMatMul':\n        case 'BatchMatMulV2':\n        case 'MatMul':\n          return [tfOps.matMul(\n              getParamValue('a', node, tensorMap, context) as Tensor2D,\n              getParamValue('b', node, tensorMap, context) as Tensor2D,\n              getParamValue('transposeA', node, tensorMap, context) as boolean,\n              getParamValue('transposeB', node, tensorMap, context) as\n                  boolean)];\n\n        case 'Transpose':\n          return [tfOps.transpose(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('perm', node, tensorMap, context) as number[])];\n\n        case '_FusedMatMul':\n          const [extraOp, activationFunc] =\n              (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n          const isBiasAdd = extraOp === 'biasadd';\n          const isPrelu = activationFunc === 'prelu';\n\n          const numArgs =\n              (getParamValue('numArgs', node, tensorMap, context) as number);\n          const leakyreluAlpha =\n              getParamValue('leakyreluAlpha', node, tensorMap, context) as\n              number;\n\n          if (isBiasAdd) {\n            if (isPrelu && numArgs !== 2) {\n              throw new Error(\n                  'Fused MatMul with BiasAdd and Prelu must have two ' +\n                  'extra arguments: bias and alpha.');\n            }\n            if (!isPrelu && numArgs !== 1) {\n              throw new Error(\n                  'Fused MatMul with BiasAdd must have one extra argument: bias.');\n            }\n          }\n          const [biasArg, preluArg] =\n              getParamValue('args', node, tensorMap, context) as Tensor[];\n          return [tfOps.fused.matMul({\n            a: getParamValue('a', node, tensorMap, context) as Tensor2D,\n            b: getParamValue('b', node, tensorMap, context) as Tensor2D,\n            transposeA: getParamValue('transposeA', node, tensorMap, context) as\n                boolean,\n            transposeB: getParamValue('transposeB', node, tensorMap, context) as\n                boolean,\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'matrices';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor3D, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'FusedBatchNorm':\n        case 'FusedBatchNormV2': {\n          return [tfOps.batchNorm(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('mean', node, tensorMap, context) as Tensor,\n              getParamValue('variance', node, tensorMap, context) as Tensor,\n              getParamValue('offset', node, tensorMap, context) as Tensor,\n              getParamValue('scale', node, tensorMap, context) as Tensor,\n              getParamValue('epsilon', node, tensorMap, context) as number)];\n        }\n        case 'FusedBatchNormV3': {\n          return [tfOps.batchNorm(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('mean', node, tensorMap, context) as Tensor,\n              getParamValue('variance', node, tensorMap, context) as Tensor,\n              getParamValue('offset', node, tensorMap, context) as Tensor,\n              getParamValue('scale', node, tensorMap, context) as Tensor,\n              getParamValue('epsilon', node, tensorMap, context) as number)];\n        }\n        case 'LRN': {\n          return [tfOps.localResponseNormalization(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('radius', node, tensorMap, context) as number,\n              getParamValue('bias', node, tensorMap, context) as number,\n              getParamValue('alpha', node, tensorMap, context) as number,\n              getParamValue('beta', node, tensorMap, context) as number)];\n        }\n        case 'Softmax': {\n          return [tfOps.softmax(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogSoftmax': {\n          return [tfOps.logSoftmax(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'SparseToDense': {\n          return [tfOps.sparseToDense(\n              getParamValue('sparseIndices', node, tensorMap, context) as\n                  Tensor,\n              getParamValue('outputShape', node, tensorMap, context) as Tensor,\n              getParamValue('sparseValues', node, tensorMap, context) as\n                  number[],\n              getParamValue('defaultValue', node, tensorMap, context) as\n                  Scalar)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'normalization';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Max': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.max(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Mean': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.mean(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Min': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.min(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Sum': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.sum(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'All': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.all(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Any': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.any(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'ArgMax': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [tfOps.argMax(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'ArgMin': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [tfOps.argMin(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'Prod': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.prod(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Cumsum': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const exclusive =\n              getParamValue('exclusive', node, tensorMap, context) as boolean;\n          const reverse =\n              getParamValue('reverse', node, tensorMap, context) as boolean;\n          return [tfOps.cumsum(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              exclusive, reverse)];\n        }\n        case 'Bincount':\n          const x = getParamValue('x', node, tensorMap, context) as Tensor1D;\n          const weights =\n              getParamValue('weights', node, tensorMap, context) as Tensor1D;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number;\n\n          return [tfOps.bincount(x, weights, size)];\n        case 'DenseBincount': {\n          const x = getParamValue('x', node, tensorMap, context) as Tensor1D |\n              Tensor2D;\n          const weights =\n              getParamValue('weights', node, tensorMap, context) as Tensor1D |\n              Tensor2D;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number;\n\n          const binaryOutput =\n              getParamValue('binaryOutput', node, tensorMap, context) as\n              boolean;\n\n          return [tfOps.denseBincount(x, weights, size, binaryOutput)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'reduction';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor1D, tidy, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'ConcatV2':\n        case 'Concat': {\n          const n = getParamValue('n', node, tensorMap, context) as number;\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          let inputs =\n              getParamValue('tensors', node, tensorMap, context) as Tensor[];\n          inputs = inputs.slice(0, n);\n          return [tfOps.concat(inputs, axis)];\n        }\n        case 'Gather': {\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          return [tfOps.gather(input, tfOps.cast(indices, 'int32'), 0)];\n        }\n        case 'GatherV2': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const batchDims =\n              getParamValue('batchDims', node, tensorMap, context) as number;\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          return [tfOps.gather(\n              input, tfOps.cast(indices, 'int32'), axis, batchDims)];\n        }\n        case 'Reverse': {\n          const dims =\n              getParamValue('dims', node, tensorMap, context) as boolean[];\n          const axis = [];\n          for (let i = 0; i < dims.length; i++) {\n            if (dims[i]) {\n              axis.push(i);\n            }\n          }\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [tfOps.reverse(input, axis)];\n        }\n        case 'ReverseV2': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [tfOps.reverse(input, axis)];\n        }\n        case 'Slice': {\n          // tslint:disable-next-line:no-any\n          const begin = getParamValue('begin', node, tensorMap, context) as any;\n          // tslint:disable-next-line:no-any\n          const size = getParamValue('size', node, tensorMap, context) as any;\n          return [tfOps.slice(\n              getParamValue('x', node, tensorMap, context) as Tensor, begin,\n              size)];\n        }\n        case 'StridedSlice': {\n          const begin =\n              getParamValue('begin', node, tensorMap, context) as number[];\n          const end =\n              getParamValue('end', node, tensorMap, context) as number[];\n          const strides =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const beginMask =\n              getParamValue('beginMask', node, tensorMap, context) as number;\n          const endMask =\n              getParamValue('endMask', node, tensorMap, context) as number;\n          const ellipsisMask =\n              getParamValue('ellipsisMask', node, tensorMap, context) as number;\n          const newAxisMask =\n              getParamValue('newAxisMask', node, tensorMap, context) as number;\n          const shrinkAxisMask =\n              getParamValue('shrinkAxisMask', node, tensorMap, context) as\n              number;\n          const tensor = getParamValue('x', node, tensorMap, context) as Tensor;\n\n          return [tfOps.stridedSlice(\n              tensor, begin, end, strides, beginMask, endMask, ellipsisMask,\n              newAxisMask, shrinkAxisMask)];\n        }\n        case 'Pack': {\n          return tidy(() => {\n            const axis =\n                getParamValue('axis', node, tensorMap, context) as number;\n            const tensors =\n                getParamValue('tensors', node, tensorMap, context) as Tensor[];\n            // Reshape the tensors to the first tensor's shape if they don't\n            // match.\n            const shape = tensors[0].shape;\n            const squeezedShape = tfOps.squeeze(tensors[0]).shape;\n            const mapped = tensors.map(tensor => {\n              const sameShape = util.arraysEqual(tensor.shape, shape);\n              if (!sameShape &&\n                  !util.arraysEqual(\n                      tfOps.squeeze(tensor).shape, squeezedShape)) {\n                throw new Error('the input tensors shape does not match');\n              }\n              return sameShape ? tensor : tfOps.reshape(tensor, shape);\n            });\n            return [tfOps.stack(mapped, axis)];\n          });\n        }\n        case 'Unpack': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const tensor =\n              getParamValue('tensor', node, tensorMap, context) as Tensor;\n          return tfOps.unstack(tensor, axis);\n        }\n        case 'Tile': {\n          const reps =\n              getParamValue('reps', node, tensorMap, context) as number[];\n          return [tfOps.tile(\n              getParamValue('x', node, tensorMap, context) as Tensor, reps)];\n        }\n        case 'Split':\n        case 'SplitV': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const numOrSizeSplits =\n              getParamValue('numOrSizeSplits', node, tensorMap, context) as\n                  number |\n              number[];\n          const tensor = getParamValue('x', node, tensorMap, context) as Tensor;\n\n          return tfOps.split(tensor, numOrSizeSplits, axis);\n        }\n        case 'ScatterNd': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor;\n          const values =\n              getParamValue('values', node, tensorMap, context) as Tensor;\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          return [tfOps.scatterND(indices, values, shape)];\n        }\n        case 'GatherNd': {\n          const x = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor;\n          return [tfOps.gatherND(x, indices)];\n        }\n        case 'SparseToDense': {\n          const indices =\n              getParamValue('sparseIndices', node, tensorMap, context) as\n              Tensor;\n          const shape =\n              getParamValue('outputShape', node, tensorMap, context) as\n              number[];\n          const sparseValues =\n              getParamValue('sparseValues', node, tensorMap, context) as Tensor;\n          const defaultValue =\n              getParamValue('defaultValue', node, tensorMap, context) as Scalar;\n          return [tfOps.sparseToDense(\n              indices, sparseValues, shape,\n              sparseValues.dtype === defaultValue.dtype ?\n                  defaultValue :\n                  tfOps.cast(defaultValue, sparseValues.dtype))];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'slice_join';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext):\n        Tensor[] => {\n          switch (node.op) {\n            case 'FFT': {\n              return [tfOps.fft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'IFFT': {\n              return [tfOps.ifft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'RFFT': {\n              return [tfOps.rfft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'IRFFT': {\n              return [tfOps.irfft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            default:\n              throw TypeError(`Node type ${node.op} is not implemented`);\n          }\n        };\n\nexport const CATEGORY = 'spectral';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Cast': {\n          return [tfOps.cast(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('dtype', node, tensorMap, context) as 'int32' |\n                  'float32' | 'bool')];\n        }\n        case 'ExpandDims': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [tfOps.expandDims(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'Squeeze': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          return [tfOps.squeeze(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n\n        case 'Reshape': {\n          return [tfOps.reshape(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        case 'MirrorPad': {\n          return [tfOps.mirrorPad(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('padding', node, tensorMap, context) as\n                  Array<[number, number]>,\n              getParamValue('mode', node, tensorMap, context) as 'reflect' |\n                  'symmetric')];\n        }\n        case 'PadV2':\n        case 'Pad': {\n          return [tfOps.pad(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('padding', node, tensorMap, context) as\n                  Array<[number, number]>,\n              getParamValue('constantValue', node, tensorMap, context) as\n                  number)];\n        }\n        case 'SpaceToBatchND': {\n          const blockShape =\n              getParamValue('blockShape', node, tensorMap, context) as number[];\n          const paddings =\n              getParamValue('paddings', node, tensorMap, context) as number[][];\n          return [tfOps.spaceToBatchND(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              blockShape, paddings)];\n        }\n        case 'BatchToSpaceND': {\n          const blockShape =\n              getParamValue('blockShape', node, tensorMap, context) as number[];\n          const crops =\n              getParamValue('crops', node, tensorMap, context) as number[][];\n          return [tfOps.batchToSpaceND(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              blockShape, crops)];\n        }\n        case 'DepthToSpace': {\n          const blockSize =\n              getParamValue('blockSize', node, tensorMap, context) as number;\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as\n               string).toUpperCase() as 'NHWC' |\n              'NCHW';\n          return [tfOps.depthToSpace(\n              getParamValue('x', node, tensorMap, context) as Tensor4D,\n              blockSize, dataFormat)];\n        }\n        case 'BroadcastTo': {\n          return [tfOps.broadcastTo(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'transformation';\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {HashTable} from '../../executor/hash_table';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager: ResourceManager): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'HashTable':\n    case 'HashTableV2': {\n      const keyDType =\n          getParamValue('keyDType', node, tensorMap, context) as DataType;\n      const valueDType =\n          getParamValue('valueDType', node, tensorMap, context) as DataType;\n\n      const hashTable = new HashTable(keyDType, valueDType);\n      resourceManager.addHashTable(node.name, hashTable);\n      return [hashTable.handle];\n    }\n    case 'LookupTableImport':\n    case 'LookupTableImportV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n\n      return [await hashTable.import(keys, values)];\n    }\n    case 'LookupTableFind':\n    case 'LookupTableFindV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [await hashTable.find(keys, defaultValue)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'hash_table';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap, TensorListMap} from '../data/types';\n\nimport {TensorArray} from './tensor_array';\nimport {TensorList} from './tensor_list';\nimport {FunctionExecutor} from './types';\n\nexport interface ExecutionContextInfo {\n  id: number;           // the unique id of the context info\n  frameName: string;    // The frame name of the loop, this comes from\n                        // the TensorFlow NodeDef.\n  iterationId: number;  // The iteration id of the loop\n}\n\n/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  private rootContext = {id: 0, frameName: '', iterationId: 0};\n  private contexts: ExecutionContextInfo[] = [this.rootContext];\n  private lastId = 0;\n  private _currentContextIds: string[];\n\n  constructor(\n      readonly weightMap: NamedTensorsMap = {},\n      readonly tensorArrayMap: TensorArrayMap = {},\n      readonly tensorListMap: TensorListMap = {},\n      readonly functionMap: {[key: string]: FunctionExecutor} = {}) {\n    this.generateCurrentContextIds();\n  }\n\n  private newFrame(id: number, frameName: string) {\n    return {id, frameName, iterationId: 0};\n  }\n\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n  set currentContext(contexts: ExecutionContextInfo[]) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n\n  get currentContext(): ExecutionContextInfo[] {\n    return this.contexts;\n  }\n\n  /**\n   * Returns the current context in string format.\n   */\n  get currentContextId(): string {\n    return this._currentContextIds[0];\n  }\n\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n  get currentContextIds(): string[] {\n    return this._currentContextIds;\n  }\n\n  private generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n    names.push('');\n    this._currentContextIds = names;\n  }\n\n  private contextIdforContexts(contexts: ExecutionContextInfo[]) {\n    return contexts ?\n        contexts\n            .map(\n                context => (context.id === 0 && context.iterationId === 0) ?\n                    '' :\n                    `${context.frameName}-${context.iterationId}`)\n            .join('/') :\n        '';\n  }\n\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n  enterFrame(frameId: string) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context =\n          Object.assign({}, this.contexts[this.contexts.length - 1]);\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(\n          0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n\n  getWeight(name: string): Tensor[] {\n    return this.weightMap[name];\n  }\n\n  addTensorArray(tensorArray: TensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n\n  getTensorArray(id: number): TensorArray {\n    return this.tensorArrayMap[id];\n  }\n\n  addTensorList(tensorList: TensorList) {\n    this.tensorListMap[tensorList.id] = tensorList;\n  }\n\n  getTensorList(id: number): TensorList {\n    return this.tensorListMap[id];\n  }\n\n  dispose(keepIds: Set<number>) {\n    for (const key in this.tensorArrayMap) {\n      this.tensorArrayMap[key].clearAndClose(keepIds);\n    }\n\n    for (const key in this.tensorListMap) {\n      this.tensorListMap[key].clearAndClose(keepIds);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorMap} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {parseNodeName} from '../operations/executors/utils';\nimport {Graph, Node} from '../operations/types';\n\nexport interface ExecutionInfo {\n  inputs: NamedTensorMap;\n  outputs: Node[];\n  usedNodes: Set<string>;\n  missingInputs: string[];\n  dynamicNode: Node;\n  syncInputs: string[];\n}\n\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(\n    inputs: NamedTensorMap, outputs: Node[], weightMap: NamedTensorsMap,\n    initNodes?: Node[]): ExecutionInfo {\n  const usedNodes = new Set<string>();\n  const missingInputs: string[] = [];\n  let dynamicNode: Node = null;\n  let syncInputs: string[] = null;\n\n  // Start with the outputs, going backwards and find all the nodes that are\n  // needed to compute those outputs.\n  const seen = new Set<string>();\n  const inputNodeNames =\n      Object.keys(inputs).map(name => parseNodeName(name)[0]);\n\n  let initNodeNames: string[] = [];\n  if (initNodes != null) {\n    initNodeNames = initNodes.map(node => parseNodeName(node.name)[0]);\n  }\n\n  const frontier = [...outputs];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    if (isControlFlow(node) || isDynamicShape(node) || isHashTable(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map(child => child.name)\n                         .filter(name => usedNodes.has(name));\n      }\n    }\n    usedNodes.add(node.name);\n\n    // Weights are dead end since we already have their values.\n    if (weightMap[node.name] != null) {\n      continue;\n    }\n    // This node is a dead end since it's one of the user-provided inputs.\n    if (inputNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    // This node is a dead end since it doesn't have any inputs.\n    if (initNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n    node.inputs.forEach(input => {\n      // Don't add to the frontier if it is already there.\n      if (seen.has(input.name)) {\n        return;\n      }\n      seen.add(input.name);\n      frontier.push(input);\n    });\n  }\n  return {inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs};\n}\n\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(\n    graph: Graph, weightMap: NamedTensorsMap,\n    executionInfo: ExecutionInfo): Node[] {\n  const {usedNodes, inputs} = executionInfo;\n  const frontier: Node[] = [];\n  const inputNodes = Object.keys(inputs)\n                         .map(name => parseNodeName(name)[0])\n                         .map(name => graph.nodes[name]);\n  const initNodes = graph.initNodes;\n\n  inputNodes.forEach(input => {\n    if (usedNodes.has(input.name)) {\n      frontier.push(input);\n    }\n  });\n  graph.weights.forEach(weight => {\n    if (usedNodes.has(weight.name)) {\n      frontier.push(weight);\n    }\n  });\n  if (initNodes != null) {\n    initNodes.forEach(node => {\n      if (usedNodes.has(node.name)) {\n        frontier.push(node);\n      }\n    });\n  }\n  const seen = new Set<string>();\n  const orderedNodes: Node[] = [];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    seen.add(node.name);\n    if (!weightMap[node.name]) {\n      orderedNodes.push(node);\n    }\n    node.children.forEach(child => {\n      if (!seen.has(child.name) && usedNodes.has(child.name) &&\n          child.inputs.every(input => seen.has(input.name))) {\n        frontier.push(child);\n      }\n    });\n  }\n  return orderedNodes;\n}\n\nconst CONTROL_FLOW_OPS = [\n  'Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf',\n  'StatelessWhile', 'if', 'While'\n];\nconst DYNAMIC_SHAPE_OPS = [\n  'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'\n];\nconst HASH_TABLE_OPS = [\n  'HashTable', 'HashTableV2', 'LookupTableImport', 'LookupTableImportV2',\n  'LookupTableFind', 'LookupTableFindV2'\n];\n\nexport function isControlFlow(node: Node) {\n  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isDynamicShape(node: Node) {\n  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isHashTable(node: Node) {\n  return HASH_TABLE_OPS.indexOf(node.op) >= 0;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NamedTensorMap, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {ISignatureDef} from '../data/compiled_api';\nimport {NamedTensorsMap, TensorArrayMap, TensorInfo, TensorListMap} from '../data/types';\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\nimport {getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow} from './model_analysis';\nimport {ResourceManager} from './resource_manager';\nimport {FunctionExecutor} from './types';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor implements FunctionExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private _weightIds: number[];\n  private _signature: ISignatureDef;\n  private _inputs: Node[];\n  private _outputs: Node[];\n  private _initNodes: Node[];  // Internal init nodes to start initialization.\n  private SEPERATOR = ',';\n  private _functions: {[key: string]: Graph} = {};\n  private _functionExecutorMap: {[key: string]: FunctionExecutor} = {};\n  private _resourceManager: ResourceManager;\n\n  get weightIds(): number[] {\n    return this.parent ? this.parent.weightIds : this._weightIds;\n  }\n\n  get functionExecutorMap(): {[key: string]: FunctionExecutor} {\n    return this.parent ? this.parent.functionExecutorMap :\n                         this._functionExecutorMap;\n  }\n\n  get weightMap(): NamedTensorsMap {\n    return this.parent ? this.parent.weightMap : this._weightMap;\n  }\n\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this._weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n\n  /**\n   * Set `ResourceManager` shared by executors of a model.\n   * @param resourceManager: `ResourceManager` of the `GraphModel`.\n   */\n  set resourceManager(resourceManager: ResourceManager) {\n    this._resourceManager = resourceManager;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this._outputs.map((node) => {\n      const name = node.signatureKey || node.name;\n      return node.defaultOutput ? (`${name}:${node.defaultOutput}`) : name;\n    });\n  }\n\n  get functions(): {[key: string]: ISignatureDef} {\n    return Object.keys(this._functions).reduce((map, key) => {\n      map[key] = this._functions[key].signature;\n      return map;\n    }, {} as {[key: string]: ISignatureDef});\n  }\n\n  /**\n   *\n   * @param graph Graph the model or function graph to be executed.\n   * @param parent When building function exector you need to set the parent\n   * executor. Since the weights and function executor maps are set at parant\n   * level, that function executor can access the function maps and weight maps\n   * through the parent.\n   */\n  constructor(private graph: Graph, private parent?: GraphExecutor) {\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._initNodes = graph.initNodes;\n    this._signature = graph.signature;\n    this._functions = graph.functions;\n    // create sub-graph executors\n    if (graph.functions != null) {\n      Object.keys(graph.functions).forEach(name => {\n        this._functionExecutorMap[name] =\n            new GraphExecutor(graph.functions[name], this);\n      });\n    }\n  }\n\n  private getCompilationKey(inputs: Node[], outputs: Node[]): string {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' +\n        sortedOutputs.join(this.SEPERATOR);\n  }\n\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  private compile(inputs: NamedTensorMap, outputs: Node[]): Node[] {\n    const executionInfo =\n        getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n    const {missingInputs, dynamicNode, syncInputs} = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(\n          `This execution contains the node '${dynamicNode.name}', which has ` +\n          `the dynamic op '${dynamicNode.op}'. Please use ` +\n          `model.executeAsync() instead. Alternatively, to avoid the ` +\n          `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\n          `Cannot compute the outputs [${outNames}] from the provided inputs ` +\n          `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(\n        this.graph, this.weightMap, executionInfo);\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model, if\n   * no outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   */\n  execute(inputs: NamedTensorMap, outputs?: string[]): Tensor[] {\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputs.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n\n    const tensorArrayMap: TensorArrayMap = {};\n    const tensorListMap: TensorListMap = {};\n\n    return tidy(() => {\n      const context = new ExecutionContext(\n          this.weightMap, tensorArrayMap, tensorListMap,\n          this.functionExecutorMap);\n      const tensorsMap: NamedTensorsMap = {...this.weightMap};\n\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors: Tensor[] = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n      });\n\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors =\n              executeOp(node, tensorsMap, context, this._resourceManager) as\n              Tensor[];\n          if (util.isPromise(tensors)) {\n            throw new Error(\n                `The execution of the op '${node.op}' returned a promise. ` +\n                `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(\n              node.name, node, tensorsMap, context, tensorsToKeep,\n              outputNodeNames, intermediateTensorConsumerCount);\n        }\n      }\n      // dispose the context for the root executor\n      if (this.parent == null) {\n        context.dispose(tensorsToKeep);\n      }\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorMap, outputs?: string[]):\n      Promise<Tensor[]> {\n    return this._executeAsync(inputs, outputs);\n  }\n\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Optional. Flag for executing a function.\n   * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n   * function execution.\n   * @param tensorArrayMap Optinal global TensorList map by id. Used for\n   * function execution.\n   */\n  private async _executeAsync(\n      inputs: NamedTensorMap, outputs?: string[], isFunctionExecution = false,\n      tensorArrayMap: TensorArrayMap = {},\n      tensorListMap: TensorListMap = {}): Promise<Tensor[]> {\n    if (!isFunctionExecution) {\n      inputs = this.mapInputs(inputs);\n      this.checkInputs(inputs);\n      this.checkInputShapeAndType(inputs);\n      outputs = this.mapOutputs(outputs);\n      this.checkOutputs(outputs);\n    }\n\n    const context = new ExecutionContext(\n        this.weightMap, tensorArrayMap, tensorListMap,\n        this.functionExecutorMap);\n\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensorMap = await this.executeWithControlFlow(\n        inputs, context, outputs, isFunctionExecution);\n    const results = outputs.map(name => getTensor(name, tensorMap, context));\n\n    // dispose all the intermediate tensors\n    const outputIds = results.map(t => t.id);\n    const inputIds = Object.keys(inputs).map(name => inputs[name].id);\n    const keepIds =\n        new Set<number>([...outputIds, ...inputIds, ...this.weightIds]);\n    Object.keys(tensorMap).forEach(key => {\n      const tensorArray = tensorMap[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.isDisposed && !keepIds.has(tensor.id)) {\n          tensor.dispose();\n        }\n      });\n    });\n    // dispose the context for the root executor\n    if (this.parent == null) {\n      context.dispose(keepIds);\n    }\n\n    return results;\n  }\n\n  async executeFunctionAsync(\n      inputs: Tensor[], tensorArrayMap: TensorArrayMap,\n      tensorListMap: TensorListMap): Promise<Tensor[]> {\n    const mappedInputs = inputs.reduce((map, tensor, index) => {\n      map[this.inputs[index].name] = tensor;\n      return map;\n    }, {} as NamedTensorMap);\n\n    return this._executeAsync(\n        mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);\n  }\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   * @param outputNames Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   * @param isFunctionExecution Flag for executing a function.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorMap, context: ExecutionContext, outputNames?: string[],\n      isFunctionExecution?: boolean): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputNames.map(name => parseNodeName(name)[0]);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n\n    const {usedNodes, missingInputs, dynamicNode, syncInputs} =\n        getExecutionSubgraph(\n            inputs, outputNodes, this.weightMap, this._initNodes);\n\n    // First nodes to execute include inputNodes, weights, and initNodes.\n    const stack: NodeWithContexts[] = [\n      ...inputNodes, ...this.graph.weights, ...(this._initNodes || [])\n    ].map(node => {\n      return {node, contexts: context.currentContext};\n    });\n    const tensorsMap: NamedTensorsMap = {...this.weightMap};\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors: Tensor[] = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorsMap, added, tensorsToKeep,\n          outputNodeNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null && !isFunctionExecution) {\n      console.warn(\n          `This model execution did not contain any nodes with control flow ` +\n          `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs =\n        outputNodes\n            .filter(\n                node => !isControlFlow(node) &&\n                    !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg =\n            `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n            `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(\n          `Cannot compute the outputs [${missingOutputs}] from the provided ` +\n          `inputs [${names}]. Consider providing the following inputs: ` +\n          `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number},\n      usedNodes: Set<string>) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not in the tensorMap yet, this include\n      // inputNodes and internal initNodes.\n      if (tensorMap[item.node.name] == null) {\n        const tensors =\n            executeOp(item.node, tensorMap, context, this._resourceManager);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (util.isPromise(tensors)) {\n          promises.push((tensors as Promise<Tensor[]>).then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(\n                item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors as Tensor[];\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(\n              item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(\n            item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      usedNodes: Set<string>) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n              return !!getTensor(name, tensorMap, context);\n            })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      } else  // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n        added[nodeName] = true;\n        stack.push({contexts: context.currentContext, node: childNode});\n      }\n    });\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(inputs: NamedTensorMap) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName, ] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private mapInputs(inputs: NamedTensorMap) {\n    const result: NamedTensorMap = {};\n    for (const inputName in inputs) {\n      if (this._signature != null && this._signature.inputs != null &&\n          this._signature.inputs[inputName] != null) {\n        const tensor = this._signature.inputs[inputName];\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n\n  private checkInputs(inputs: NamedTensorMap) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  private mapOutputs(outputs: string[]) {\n    return outputs.map(name => {\n      if (this._signature != null && this._signature.outputs != null &&\n          this._signature.outputs[name] != null) {\n        const tensor = this._signature.outputs[name];\n        return tensor.name;\n      }\n      return name;\n    }, {});\n  }\n\n  private checkOutputs(outputs: string[]): void {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {HashTableMap, NamedTensorMap} from '../data/types';\nimport {HashTable} from './hash_table';\n\n/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n  constructor(\n      readonly hashTableNameToHandle: NamedTensorMap = {},\n      readonly hashTableMap: HashTableMap = {}) {}\n\n  /**\n   * Register a `HashTable` in the resource manager.\n   *\n   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n   * where id is the table handle tensor's id.\n   *\n   * @param name Op node name that creates the `HashTable`.\n   * @param hashTable The `HashTable` to be added to resource manager.\n   */\n  addHashTable(name: string, hashTable: HashTable) {\n    this.hashTableNameToHandle[name] = hashTable.handle;\n    this.hashTableMap[hashTable.id] = hashTable;\n  }\n\n  /**\n   * Get the table handle by node name.\n   * @param name Op node name that creates the `HashTable`. This name is also\n   *     used in the inputs list of lookup and import `HashTable` ops.\n   */\n  getHashTableHandleByName(name: string) {\n    return this.hashTableNameToHandle[name];\n  }\n\n  /**\n   * Get the actual `HashTable` by its handle tensor's id.\n   * @param id The id of the handle tensor.\n   */\n  getHashTableById(id: number): HashTable {\n    return this.hashTableMap[id];\n  }\n\n  /**\n   * Dispose `ResourceManager`, including its hashTables and tensors in them.\n   */\n  dispose() {\n    for (const key in this.hashTableMap) {\n      this.hashTableMap[key].clearAndClose();\n      delete this.hashTableMap[key];\n    }\n\n    for (const name in this.hashTableNameToHandle) {\n      this.hashTableNameToHandle[name].dispose();\n      delete this.hashTableNameToHandle[name];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {InferenceModel, io, ModelPredictConfig, NamedTensorMap, Tensor} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\nimport {ResourceManager} from './resource_manager';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class GraphModel implements InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: io.IOHandler;\n  private artifacts: io.ModelArtifacts;\n  private initializer: GraphExecutor;\n  private resourceManager: ResourceManager;\n  private signature: tensorflow.ISignatureDef;\n\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  get metadata(): {} {\n    return this.artifacts.userDefinedMetadata;\n  }\n\n  get modelSignature(): {} {\n    return this.signature;\n  }\n\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: string|io.IOHandler,\n      private loadOptions: io.LoadOptions = {}) {\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n    this.resourceManager = new ResourceManager();\n  }\n\n  private findIOHandler() {\n    const path = this.modelUrl;\n    if ((path as io.IOHandler).load != null) {\n      // Path is an IO Handler.\n      this.handler = path as io.IOHandler;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path as string, this.loadOptions);\n    } else {\n      const handlers = io.getLoadHandlers(path as string, this.loadOptions);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path as string, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  async load(): Promise<boolean> {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n    const artifacts = await this.handler.load();\n\n    return this.loadSync(artifacts);\n  }\n\n  /**\n   * Synchronously construct the in memory weight map and\n   * compile the inference graph. Also initialize hashtable if any.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  loadSync(artifacts: io.ModelArtifacts) {\n    this.artifacts = artifacts;\n    const graph = this.artifacts.modelTopology as tensorflow.IGraphDef;\n\n    let signature;\n    if (this.artifacts.userDefinedMetadata != null &&\n        this.artifacts.userDefinedMetadata.signature != null) {\n      signature =  // tslint:disable-next-line:no-any\n          (this.artifacts.userDefinedMetadata as any).signature as\n          tensorflow.ISignatureDef;\n    } else {\n      signature = this.artifacts.signature;\n    }\n    this.signature = signature;\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap =\n        io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(\n        OperationMapper.Instance.transformGraph(graph, this.signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    // Attach a model-level resourceManager to each executor to share resources,\n    // such as `HashTable`.\n    this.executor.resourceManager = this.resourceManager;\n\n    if (artifacts.modelInitializer != null &&\n        (artifacts.modelInitializer as tensorflow.IGraphDef).node != null) {\n      const initializer =\n          OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n      this.initializer = new GraphExecutor(initializer);\n      this.initializer.weightMap = this.executor.weightMap;\n      // Attach a model-level resourceManager to the initializer, the\n      // hashTables created from when executing the initializer will be stored\n      // in the resourceManager.\n      this.initializer.resourceManager = this.resourceManager;\n      this.initializer.executeAsync({}, []);\n    }\n\n    return true;\n  }\n\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error(\n          'GraphModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    return handlerOrURL.save(this.artifacts);\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config?: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap {\n    return this.execute(inputs, this.outputNodes);\n  }\n\n  private normalizeInputs(inputs: Tensor|Tensor[]|\n                          NamedTensorMap): NamedTensorMap {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error(\n          'Input tensor count mismatch,' +\n          `the graph model has ${this.inputNodes.length} placeholders, ` +\n          `while there are ${inputs.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = (inputs as Tensor[])[i];\n      return map;\n    }, {} as NamedTensorMap);\n  }\n\n  private normalizeOutputs(outputs: string|string[]): string[] {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs?: string|string[]):\n      Tensor|Tensor[] {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async executeAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      outputs?: string|string[]): Promise<Tensor|Tensor[]> {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  private convertTensorMapToTensorsMap(map: NamedTensorMap): NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n\n  /**\n   * Releases the memory used by the weight tensors and resourceManager.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  dispose() {\n    this.executor.dispose();\n\n    if (this.initializer) {\n      this.initializer.dispose();\n    }\n\n    this.resourceManager.dispose();\n  }\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport async function loadGraphModel(\n    modelUrl: string|io.IOHandler,\n    options: io.LoadOptions = {}): Promise<GraphModel> {\n  if (modelUrl == null) {\n    throw new Error(\n        'modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n        'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub) {\n    if ((modelUrl as io.IOHandler).load == null) {\n      if (!(modelUrl as string).endsWith('/')) {\n        modelUrl = (modelUrl as string) + '/';\n      }\n      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n    }\n  }\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.0.0';\nexport {version};\n"],"names":["DataType","SaverDef","CheckpointFormatVersion","CUSTOM_OPS","registerOp","name","opFunc","opMapper","tfOpName","category","inputs","attrs","customExecutor","getRegisteredOp","deregisterOp","getParamValue","paramName","node","tensorMap","context","resourceManager","inputParam","inputParams","undefined","inputIndexStart","start","end","inputIndexEnd","type","getTensor","inputNames","slice","map","tensor","data","dataSync","util","toNestedArray","shape","attrParam","attrParams","value","tensorsMap","nodeName","index","parseNodeName","getHashTableHandleByName","contextId","currentContextIds","find","getNodeNameWithContextId","getNodeNameAndIndex","inputName","currentContextId","parts","split","length","Number","getPadding","pad","explicitPadding","i","cloneTensor","kept","clone","tfName","notSupported","defaultValue","tfDeprecatedName","OperationMapper","Instance","this","_instance","[object Object]","mappersJson","concat","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","logical","image","graph","matrices","normalization","reduction","sliceJoin","spectral","transformation","hashTable","op","json","opMappers","reduce","mapper","signature","tfNodes","placeholders","weights","initNodes","nodes","mapNode","startsWith","push","input","outputs","inputNodeNameToKey","outputNodeNameToKey","mapSignatureEntries","allNodes","Object","keys","forEach","key","children","signatureKey","functions","library","function","func","mapFunction","result","entries","prev","curr","attr","newNode","substr","rawAttrs","param","getStringParam","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","getFuncParam","Error","functionDef","nodeDef","inputArg","arg","dtype","parseDtypeParam","returnNodeMap","ret","outputArg","output","defaultOutput","mapArgsToSignature","methodName","mapArgToTensorInfo","nameMap","parseStringParam","s","keepCase","Array","isArray","String","fromCharCode","apply","text","global","env","atob","Buffer","toString","decodeBase64","toLowerCase","def","b","parseInt","tensorflow.DataType","DT_FLOAT","DT_INT32","DT_INT64","DT_INT8","DT_UINT8","DT_BOOL","DT_DOUBLE","DT_STRING","list","v","parseTensorShapeParam","unknownRank","dim","size","f","NodeValueImpl","getInput","getAttr","assertShapesMatchAllowUndefinedSize","shapeA","shapeB","errorMessagePrefix","assert","n1","n2","shapesEqualAllowUndefinedSize","TensorArray","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","idTensor","scalar","keep","id","closed","closed_","keepIds","tensors","has","dispose","tensorWithState","cleared","read","indices","t","written","write","readMany","stack","maxIndex","Math","max","writeMany","unstack","totalLength","cumulativeLengths","len","elementPerRow","tidy","reshape","sizes","TensorList","elementDtype","maxNumElements","numElements","reshapedTensors","pop","elementIndex","executeOp","async","thenFunc","elseFunc","cond","args","functionMap","executeFunctionAsync","tensorArrayMap","tensorListMap","bodyFunc","condFunc","condResult","argIds","condValue","indexOf","origResult","resultIds","pred","frameId","enterFrame","exitFrame","nextIteration","tensorArray","addTensorArray","writeTensor","writeTensorArray","getTensorArray","readId","readIndex","gatherId","gatherIndices","gatherDtype","gather","scatterId","scatterIndices","scatterTensor","scatterTensorArray","scatter","concatId","concatTensorArray","concatDtype","splitId","splitTensor","lengths","splitTensorArray","sizeId","sizeTensorArray","closeId","closeTensorArray","clearAndClose","tensorList","getTensorList","setItem","elementDType","getItem","addTensorList","numElementsParam","reserve","fromTensor","pushBack","popBack","TypeError","fusedConvAndDepthWiseParams","extraOp","activationFunc","isBiasAdd","isPrelu","isBatchNorm","numArgs","stride","dataFormat","toUpperCase","dilations","biasArg","preluArg","leakyreluAlpha","nmsParams","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","HashTable","keyDType","valueDType","handle","Map","clear","values","checkKeyAndValueTensor","$keys","$values","keysLength","valuesLength","set","findWithDefault","get","tfc.tidy","tfOps.add","tfOps.addN","tfOps.mod","tfOps.mul","tfOps.div","tfOps.divNoNan","tfOps.floorDiv","tfOps.sub","tfOps.minimum","tfOps.maximum","tfOps.pow","tfOps.squaredDifference","arithmetic.executeOp","tfOps.abs","tfOps.acos","tfOps.acosh","tfOps.asin","tfOps.asinh","tfOps.atan","tfOps.atan2","tfOps.atanh","tfOps.ceil","tfOps.complex","tfOps.cos","tfOps.cosh","tfOps.elu","tfOps.erf","tfOps.exp","tfOps.expm1","tfOps.floor","tfOps.log","tfOps.log1p","tfOps.imag","tfOps.neg","tfOps.reciprocal","tfOps.real","tfOps.relu","tfOps.round","tfOps.selu","tfOps.sigmoid","tfOps.sin","tfOps.sign","tfOps.sinh","tfOps.softplus","tfOps.sqrt","tfOps.square","tfOps.tanh","tfOps.tan","tfOps.clipByValue","tfOps.relu6","tfOps.rsqrt","tfOps.prod","tfOps.leakyRelu","tfOps.prelu","basicMath.executeOp","control.executeOp","dilation","tfOps.conv1d","tfOps.conv2d","tfOps.fused","conv2d","x","filter","strides","bias","activation","preluActivationWeights","depthwiseConv2d","tfOps.conv2dTranspose","tfOps.depthwiseConv2d","tfOps.conv3d","kernelSize","tfOps.avgPool","tfOps.maxPool","includeBatchInIndex","indexes","tfOps.maxPoolWithArgmax","tfOps.avgPool3d","tfOps.maxPool3d","strideHeight","strideWidth","dilationHeight","dilationWidth","tfOps.dilation2d","convolution.executeOp","tfOps.fill","stop","num","tfOps.linspace","logits","numSamples","seed","tfOps.multinomial","depth","onValue","offValue","tfOps.oneHot","tfOps.ones","tfOps.onesLike","tfOps.randomUniform","step","tfOps.range","mean","stdDev","tfOps.truncatedNormal","tfOps.zeros","tfOps.zerosLike","creation.executeOp","tfOps.image","nonMaxSuppressionWithScoreAsync","selectedIndices","selectedScores","padToMaxOutputSize","nonMaxSuppressionPaddedAsync","validOutputs","nonMaxSuppressionAsync","condition","tfOps.cast","tfOps.whereAsync","tfOps.setdiff1dAsync","dynamic.executeOp","k","sorted","tfOps.topk","tfOps.unique","axis","evaluation.executeOp","images","alignCorners","halfPixelCenters","resizeBilinear","resizeNearestNeighbor","boxInd","cropSize","method","extrapolationValue","cropAndResize","image.executeOp","tfOps.tensor1d","tfOps.scalar","rank","message","summarize","console","warn","log","prototype","call","graph.executeOp","tfOps.equal","tfOps.notEqual","tfOps.greater","tfOps.greaterEqual","tfOps.less","tfOps.lessEqual","tfOps.logicalAnd","tfOps.logicalNot","tfOps.logicalOr","tfOps.where","logical.executeOp","tfOps.matMul","tfOps.transpose","matMul","a","transposeA","transposeB","matrices.executeOp","tfOps.batchNorm","tfOps.localResponseNormalization","tfOps.softmax","tfOps.logSoftmax","tfOps.sparseToDense","normalization.executeOp","keepDims","tfOps.max","tfOps.mean","tfOps.min","tfOps.sum","tfOps.all","tfOps.any","tfOps.argMax","tfOps.argMin","exclusive","reverse","tfOps.cumsum","tfOps.bincount","binaryOutput","tfOps.denseBincount","reduction.executeOp","n","tfOps.concat","tfOps.gather","batchDims","dims","tfOps.reverse","begin","tfOps.slice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","tfOps.stridedSlice","squeezedShape","tfOps.squeeze","mapped","sameShape","arraysEqual","tfOps.reshape","tfOps.stack","tfOps.unstack","reps","tfOps.tile","numOrSizeSplits","tfOps.split","tfOps.scatterND","tfOps.gatherND","sparseValues","sliceJoin.executeOp","tfOps.fft","tfOps.ifft","tfOps.rfft","tfOps.irfft","spectral.executeOp","tfOps.expandDims","tfOps.mirrorPad","tfOps.pad","blockShape","paddings","tfOps.spaceToBatchND","crops","tfOps.batchToSpaceND","blockSize","tfOps.depthToSpace","tfOps.broadcastTo","transformation.executeOp","addHashTable","getHashTableById","import","hashTable.executeOp","tfc.util","isPromise","then","ExecutionContext","weightMap","frameName","iterationId","rootContext","generateCurrentContextIds","currentContext","contexts","_currentContextIds","names","contextIdforContexts","join","lastId","newFrame","unshift","splice","shift","assign","getExecutionSubgraph","usedNodes","Set","missingInputs","dynamicNode","syncInputs","seen","inputNodeNames","initNodeNames","frontier","isControlFlow","isDynamicShape","isHashTable","child","add","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","HASH_TABLE_OPS","GraphExecutor","parent","_outputs","_inputs","_initNodes","_signature","_functions","_functionExecutorMap","weightIds","_weightIds","functionExecutorMap","_weightMap","_resourceManager","inputNodes","outputNodes","sortedInputs","sort","sortedOutputs","SEPERATOR","executionInfo","outNames","inNames","weight","orderedNodes","every","getNodesInTopologicalOrder","mapInputs","checkInputs","checkInputShapeAndType","mapOutputs","checkOutputs","outputNodeNames","compilationKey","getCompilationKey","compiledMap","compile","tensorsToKeep","getFrozenTensorIds","intermediateTensorConsumerCount","checkTensorForDisposal","ids","outputNames","getTensorsForCurrentContenxt","count","_executeAsync","isFunctionExecution","executeWithControlFlow","results","outputIds","inputIds","isDisposed","mappedInputs","added","promises","processStack","Promise","all","missingOutputs","alternativeMsg","item","processChildNodes","childNode","some","match","notInGraph","normalizedName","ResourceManager","hashTableNameToHandle","hashTableMap","GraphModel","modelUrl","loadOptions","modelVersion","version","executor","metadata","artifacts","userDefinedMetadata","modelSignature","path","load","handler","requestInit","io","browserHTTPRequest","handlers","getLoadHandlers","findIOHandler","loadSync","modelTopology","versions","producer","minConsumer","decodeWeights","weightData","weightSpecs","transformGraph","convertTensorMapToTensorsMap","modelInitializer","initializer","executeAsync","handlerOrURL","config","getSaveHandlers","save","execute","Tensor","normalizeInputs","normalizeOutputs","newMap","loadGraphModel","options","fromTFHub","endsWith","model"],"mappings":"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"}