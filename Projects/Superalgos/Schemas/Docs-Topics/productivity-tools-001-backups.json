{
    "topic": "Productivity Tools",
    "pageNumber": "1",
    "type": "Backups",
    "definition": {
        "text": "The backup feature is designed to preserve the integrity of references as you would expect when you wish to restore a data structure to a previous state of affairs.",
        "updated": 1611489612653
    },
    "paragraphs": [
        {
            "style": "Title",
            "text": "Introduction",
            "updated": 1611489635384
        },
        {
            "style": "Text",
            "text": "When you back up a Node, a structure of nodes, a complete hierarchy, or even the Workspace, all existing references are stored in the resulting JSON file.",
            "updated": 1615823255327
        },
        {
            "style": "Text",
            "text": "When you restore a workspace backup, the current workspace is replaced with the backup.",
            "updated": 1615820832685
        },
        {
            "style": "Text",
            "text": "Now, let’s see what happens when you restore anything other than a workspace, that is, any of the data structures contained in the workspace. What we want to analyze is what happens with references that may be present in the structure, in particular, with the different types of references.",
            "updated": 1615820914384
        },
        {
            "style": "Success",
            "text": "When a backup is restored, what happens with each type of reference varies depending on one factor: Is the original structure present in the workspace? Or has the structure been deleted before restoring the backup?",
            "updated": 1615823276285
        },
        {
            "style": "Title",
            "text": "Outgoing References"
        },
        {
            "style": "Callout",
            "text": "Outgoing references are kept intact no matter if the original structure of nodes still exists or not.",
            "updated": 1615821071450
        },
        {
            "style": "Text",
            "text": "For example, in a Task set up to run a Backtesting Session, the Trading Process Instance references the Trading Bot Multi-Period process, the Trading System Reference references a Trading System, and the Trading Engine Reference references the Trading Engine. These are all outgoing references relative to the structure of nodes that make up a Task.",
            "updated": 1615823380296
        },
        {
            "style": "Gif",
            "text": "GIFs/Superalgos/Docs/design-space/backups-01.gif",
            "updated": 1611489923510
        },
        {
            "style": "Text",
            "text": "As the capture above shows, when restoring the backup of a Task, the three outgoing references are maintained, even when the original task has not been deleted.",
            "updated": 1615821379213
        },
        {
            "style": "Success",
            "text": "This means that restoring a backup is a viable way to duplicate structures of nodes with outgoing references when you expect outgoing references to be preserved.",
            "updated": 1615821244593
        },
        {
            "style": "Title",
            "text": "Incoming References"
        },
        {
            "style": "Callout",
            "text": "Incoming references are restored only when the original structure of nodes is deleted before restoring the backup."
        },
        {
            "style": "Text",
            "text": "Let’s take a Trading System as an example. Trading systems usually have several incoming references originating at different testing and live trading sessions.",
            "updated": 1615821415989
        },
        {
            "style": "Gif",
            "text": "GIFs/Superalgos/Docs/design-space/backups-02.gif",
            "updated": 1611489956681
        },
        {
            "style": "Text",
            "text": "The capture above shows that restoring a backup of a trading system when the original definition is still in the workspace causes the incoming references to be lost. This is because the backup is restored with new IDs on each node.",
            "updated": 1615822161951
        },
        {
            "style": "Text",
            "text": "However, as the capture below shows, if the original structure of nodes is deleted before the backup is restored, then the incoming references are restored as well. This is because deleting the original structure releases the IDs of the nodes involved and allows recreating the structure with the same IDs each of the nodes used to have.",
            "updated": 1615822180175
        },
        {
            "style": "Gif",
            "text": "GIFs/Superalgos/Docs/design-space/backups-03.gif",
            "updated": 1611489978479
        },
        {
            "style": "Title",
            "text": "Internal References"
        },
        {
            "style": "Text",
            "text": "Internal references remain to be internal references only when the original structure of nodes is deleted before restoring the backup. If the original structure of nodes is present, then the references will point to the original nodes on the original structure of nodes.",
            "updated": 1615822737609
        },
        {
            "style": "Text",
            "text": "Let’s see what happens when we restore a backup of a Shapes node without deleting the original node first:",
            "updated": 1615822610298
        },
        {
            "style": "Gif",
            "text": "GIFs/Superalgos/Docs/design-space/backups-04.gif",
            "updated": 1611490001325
        },
        {
            "style": "Text",
            "text": "As expected, the references from vertices in the restored backup do not point to the points in the same structure, but instead, point to the original points in the original structure.",
            "updated": 1615823436326
        },
        {
            "style": "Text",
            "text": "On the other hand, if the original structure of nodes is deleted before restoring the backup, then the references point to the nodes within the same structure:"
        },
        {
            "style": "Gif",
            "text": "GIFs/Superalgos/Docs/design-space/backups-05.gif",
            "updated": 1611490016934
        },
        {
            "style": "Success",
            "text": "To understand this behavior you must consider —again— what happens with the IDs of the nodes involved! In the first case, when you delete the structure of nodes before the backup is restored, the IDs are freed so that when the backup is restored, the nodes may be restored with the same IDs they used to have. This allows for the references to be kept as they used to be. In the second case, the IDs are already taken and the nodes are created with new IDs. This results in the references pointing to the original nodes, instead of the ones that were restored from the backup.",
            "updated": 1615823179782
        },
        {
            "style": "Title",
            "text": "Conclusion"
        },
        {
            "style": "Text",
            "text": "The backup feature is designed to preserve the integrity of references as you would expect when you wish to restore a data structure to a previous state of affairs."
        },
        {
            "style": "Text",
            "text": "However, the tool’s particular behavior when restoring a backup without deleting the original structure may be of use on certain occasions. In such cases, the backup feature behaves differently than the clone feature.",
            "updated": 1615823501537
        },
        {
            "style": "Text",
            "text": ""
        }
    ]
}